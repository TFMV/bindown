// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schemafiles generated by go-bindata.// sources:
// ../../bindown.schema.json
package schemafiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _BindownSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5d\x6f\xdb\xca\x11\x7d\xf7\xaf\x18\xe8\x16\xd0\x8b\x4c\xa5\x4d\xe0\x5e\xf8\xcd\xb8\x41\x6f\x03\x04\x70\xd1\xb8\x09\x8a\x3a\x70\x96\xe4\x50\xdc\x78\xb9\xcb\xee\x0e\x25\xb3\x86\xfe\x7b\x31\xcb\x0f\xf1\x53\x92\x73\x83\x20\x79\x91\xc2\x1d\xcd\x9e\x9d\x3d\x7b\xe6\x2c\xfd\x7c\x01\xb0\xf8\x93\x8c\x17\xd7\xb0\x48\x89\x72\x77\xbd\x5e\xef\xa4\x52\x22\x94\x31\xba\x60\x23\x29\x2d\xc2\x40\x9a\x75\x28\x75\x6c\x76\xba\xf9\x0c\x5c\x94\x62\x26\x82\xaf\xce\xe8\xc5\xca\x27\xa9\x9e\x34\x89\xae\xd7\x6b\x1e\xbb\xac\xe3\x8c\xdd\xac\x63\x2b\x12\xba\x7c\xf5\xd7\x75\xf5\xec\x97\xea\x77\x31\x26\x52\x4b\x92\x46\xbb\xc5\x35\x30\x1e\xff\x30\x47\x1d\xa3\x8e\xca\xf6\x19\xc0\x22\xb7\x26\x47\x4b\x12\x5d\xe7\x29\xc0\x42\xd8\x28\x95\x5b\x7c\xc8\x05\xa5\xbd\x11\x9f\xc9\x45\x56\xe6\x9c\x9f\xa1\xdd\xa5\x08\x1c\x06\x52\x03\xa5\x08\xbc\x16\x65\x44\x8c\x31\xd4\x59\x60\x97\xa2\x45\x3f\x18\x4a\x2d\x6c\x09\xd2\x81\x32\x91\x20\x8c\x03\x78\x8b\x89\x28\x14\xf1\xb3\x60\x7d\x5f\xbc\x7a\xf5\x3a\x0a\xa5\xf6\x5f\xd0\xaf\xa7\x9d\x98\xca\x1c\x79\x46\x47\x56\xea\xcd\xa2\x1d\xda\x1f\xa2\x16\xa1\xd4\x67\xe0\xd5\x22\x43\x30\x49\x17\x12\x19\x08\x11\xa4\x76\x24\x94\x1a\xe0\xa2\xc1\x4f\x0e\xb5\x0c\x5e\x8e\x50\x49\xfd\x78\x02\xe2\xa7\x14\x29\x45\xcb\x98\x22\x8b\x82\x10\x04\xb8\x32\xe3\x5f\xf2\xb3\x1a\xb5\x07\x8b\x22\x66\x54\x91\xc9\x4b\xa9\x37\x20\x69\x06\x51\x68\x8c\x42\xa1\xa7\x21\x99\x2d\x5a\xcb\xec\x1c\xe2\x12\x71\xec\x79\x24\xd4\x3b\xc2\x8c\x87\x13\xa1\x1c\xae\x8e\x60\xbf\x6d\x72\x81\x50\xca\xec\x1c\x94\xa6\x60\xd0\xcd\x1c\xb0\x15\xaa\x40\x57\xd7\x90\x31\x9b\x8a\x37\xc6\x81\xd0\x35\x67\x08\x23\x2a\x6c\x5b\x6f\x12\x76\x83\x04\xae\x74\x84\xd9\x60\x81\xb2\x06\xd6\xc5\xcd\x67\xc7\x62\xc2\x70\x7e\x59\x77\x4e\xc3\xba\x01\xb1\xe8\x04\xef\x27\xeb\x25\xac\x15\xe5\x74\xb5\x2c\xfe\xb7\x90\x16\xe3\x87\xad\xb0\x67\x54\x6c\x00\x6c\x8e\x22\x43\x20\x83\xb2\xde\x80\x92\x8e\xb8\x20\x5b\x61\xa5\x08\x15\x32\x2d\x05\x41\x56\x38\x62\xe6\xe6\x16\x1d\x6a\x82\xc4\x58\x10\xba\x21\x32\x57\xde\x15\x51\x84\x18\x4f\xf3\xe2\xc8\x3a\x5d\x11\x3a\x92\x54\xf4\x85\x64\xb4\xce\x7f\x4c\x4b\xc8\xf9\x51\x47\x8b\x32\x28\x4b\x27\xd6\x84\x5f\x31\xa2\xb3\x0b\xf8\xa1\xbb\x1a\x60\x41\x86\x76\x81\x2d\x29\x13\x6b\x32\x2e\xb0\x1b\x90\x0c\x9f\x44\x96\x2b\x8f\xfd\x3f\x3d\x34\xa3\x95\x30\x7d\x27\x56\x08\xb0\x78\xfd\xeb\x15\xe3\x90\xfc\xb9\x1a\x0f\x8b\x2c\xbe\x7a\xc3\x01\x4f\xbf\x5e\x3d\x5c\xbd\x59\x0c\x22\xf6\xc3\x9f\x2c\xcc\x54\x25\x79\xdd\xc2\xee\xbc\x08\x2e\xde\x56\xdf\x26\x26\x53\x52\x17\x4f\x1c\xf2\xde\x7f\x99\x88\xd8\xf9\xa6\xe4\xbc\x1a\xd5\x5f\x87\x88\x2e\xe6\xfe\xf7\x79\x92\x69\xc3\xfd\xea\x51\xcd\x9f\xec\x1f\x76\x98\xde\xd7\x47\xa9\x9e\x16\x28\x95\xae\x23\xea\x2c\xf9\x8f\xda\xec\x74\x75\x7a\xf2\xdc\x58\x7a\xf1\xe9\x21\xcc\x72\x25\x08\x4f\x48\xfd\x0d\x34\x81\xfe\xe4\x0e\x90\x04\x70\xa3\x4b\x28\xb4\x43\x82\x44\xa2\x8a\x5d\xd5\x65\xfb\x70\x3d\x99\x43\x04\x8e\x0a\xcb\x1e\x97\xbd\x7a\xd6\x13\x04\x70\xd0\xe6\xa6\x57\x1f\x92\xb0\xf6\x4a\x72\x07\x38\xc2\x22\x44\x46\x47\x82\xa4\xe6\x4e\x0d\x3b\x49\x69\x2f\xe1\xd2\xb5\xaa\xee\x20\x32\x19\x8b\x79\x22\xad\xa3\x00\x3e\x0a\x5b\xc9\x79\x4f\x44\x7c\xce\xd0\x50\xca\xd1\xa1\xd4\xdd\xa4\x07\x28\x4b\x57\x2d\x01\x48\x3c\x72\xca\xdc\x62\x84\x3c\x82\xc1\xbd\x7e\x79\xbf\x2d\xac\x3a\xc3\x11\x14\xd6\x6b\x65\x63\x5e\x40\x74\x6b\xc3\xa5\xfc\x86\x4e\x7f\xbc\x3f\x1c\xd3\x4d\xa3\xf1\x36\x19\x89\xcd\x58\x6e\x4e\x48\xe7\x84\x6c\x1c\xc9\xa0\x8b\x2c\x44\x7b\xfc\x98\x7f\xfe\xc3\xfd\x2a\x12\x9a\xb9\x5a\x38\x8c\x99\x85\xcb\xc2\xaa\xe5\x0a\x96\x5d\xc3\xb9\xf4\xcc\x59\x86\x52\x2f\x83\x7b\x7d\xb7\x33\x9d\x1c\xcc\x20\xa1\x76\xa2\x74\x20\x62\xf6\x98\xa1\xe0\x4c\xb5\x87\x88\x0a\x6b\xb9\x09\xa2\xde\x4a\x6b\x74\x86\x9a\xae\x61\x69\x5c\x9d\x91\x27\x59\x06\x70\x97\x1a\x57\xf1\xdb\xfb\x8e\x1c\x2d\x73\x7c\x53\xcb\xc1\xd8\x85\x08\x3e\x6d\x89\xa7\x6b\x58\xc2\xc6\x2c\x1d\xfc\x7e\x7b\xfb\xc1\x07\xfe\x7e\x7b\xf3\xcf\xdf\xfe\x7e\x00\x18\xc0\x3b\x70\xa9\x29\x54\x0c\xb1\x89\x0a\x46\x00\x3b\x5e\x37\xb5\x93\x3a\x93\xa1\x77\xc4\xc1\xbd\xfe\xb7\x29\x7c\x45\x2c\x26\x68\x99\xe2\x20\xda\x5c\x50\x38\x46\xb5\x31\x4a\xe8\xcd\xe1\x5c\xba\x52\x93\x78\x0a\xe0\x6f\xc6\x42\xdd\x97\x56\xde\x64\x45\x7e\xd6\x54\x6c\x39\x09\xf3\x99\xf5\x80\x0c\x7c\x69\x6e\x21\x75\xb4\xbf\x39\x64\xe5\x81\xdf\xeb\xed\xf3\x73\xb0\x45\xeb\xa4\xd1\xfb\x7d\x6f\xe8\xf2\xf9\x39\x30\x6e\xbf\xe7\x4f\xae\xc9\x7e\x1f\x90\xb0\xc1\xe6\x7f\x5f\x02\x80\x77\x89\x9f\xb7\xaa\x8d\xaf\xe5\x56\x58\x58\xd6\x99\xae\xe1\xcf\xc1\x5f\x82\xd7\x55\xe9\x6d\xa1\xa1\xbe\xe7\xf0\x5e\x09\xb8\x7a\x03\xa1\x24\xf0\xfd\xa7\x2e\xfc\x0a\x24\x55\x5a\xd6\x9e\xc2\x33\xa0\xfb\x49\xfa\x98\x7d\x77\xbb\xf4\x0d\xb5\x45\x3b\xa7\x1c\xa3\xae\x74\x31\x20\xf7\x64\x64\x3d\xda\x1a\xe7\xee\x95\x6a\xe6\x84\xf7\x8c\xf3\xec\xbd\x6b\xf2\x96\x06\xf3\x86\xb6\x13\x7f\xec\x34\x7e\xac\x5a\x42\xd7\x86\x93\xbf\xb6\xf9\xd3\xd2\x49\x32\xa9\x63\x99\xa0\x28\x45\x7b\xa6\x94\x9d\xbc\x21\xbc\xf5\xff\x0d\xd1\xc1\x2e\x95\x51\xda\xef\xc2\x2d\x3e\x91\xe7\x4a\x7a\xcc\xfd\x95\xcd\x54\x0e\x8e\x98\xaf\xb9\xf6\xdf\x3d\xe4\xbe\x38\x7e\xa1\x01\x7c\x4a\x51\x83\xc2\x84\x00\xb3\x9c\xca\x15\xdf\x64\x06\xc1\x55\xe4\xc8\x38\xcd\x1b\x45\xfe\x37\x7e\x52\xdb\xc2\xb1\xff\x6a\x0d\xe1\xf4\x90\xcd\x66\x07\xc6\xd6\xb1\xaf\xda\x30\x34\x68\x30\x7f\x8b\x82\x6f\x68\x30\x73\xde\x68\x22\x78\xda\xc2\xce\xed\xd6\x50\xa7\x4f\xee\xd8\xf8\x07\xdf\x6f\xd7\x1a\x7b\x3c\xb9\x0b\xf1\x9c\xef\x6e\x9d\xf7\xcf\xbb\x43\x27\x2f\xc6\xa7\x05\xb3\xb9\x1f\xf7\xaa\xd9\x8a\xc8\x6a\x52\xec\x2e\x06\xcb\x9e\x56\xdd\x8b\x7a\x9a\x29\x11\x58\x44\x22\x4a\x7b\x42\x1c\x57\x2f\x70\x38\x4b\xb0\x0e\xea\xee\xd3\xce\x3f\x65\x02\x63\x69\x31\x22\x63\xcb\xfa\x8d\x55\xd3\xb1\x7c\x53\xf2\xf9\xdb\xd6\x54\xb9\x5b\x7c\x22\x2b\x22\x36\xc7\x89\xf4\xcd\xff\x8e\x35\x4c\x3a\xb0\xa8\x04\xc9\x2d\x36\xaf\x6b\x86\x99\xbd\x59\x31\x3a\x91\x9b\x82\x39\x6a\xb4\x4f\x00\x16\x9d\x7f\x49\x58\x4f\xc6\x66\xc8\x35\x76\xa2\x76\x3d\x85\x43\x58\xb3\x25\x61\x87\xaa\x64\x26\x09\x2d\xe0\x16\x7d\x5f\xad\xaf\x6a\x60\x2c\x18\xff\x06\x69\x7c\x06\x0e\xf3\xeb\x0a\xe1\x21\x8b\x74\x7a\x49\xb0\xee\xf6\xca\x49\x6e\x35\xdd\xaf\xdd\xbf\xbe\x18\x9f\xf6\xb8\xa7\x9b\xd9\x88\x54\xa3\x1e\x72\x98\x1a\xc4\x56\x48\xe5\x1d\x13\x5f\xa1\x9a\x4d\x23\xd3\xbc\x04\x09\xc6\xcb\x99\x6a\xe6\x75\xf4\x43\xbb\x57\xb3\x64\x0a\xe5\xb9\x3c\xf2\x96\xb7\x41\x54\x4f\xe0\x2a\xb2\x00\x99\xef\xc7\x97\x11\xf6\x9f\x9d\x3b\xe3\x1b\xff\xd1\xdb\xfe\x8c\xc6\xcd\xf2\x43\x0d\x6e\xf8\x5d\xaa\x36\x45\x19\xde\xec\xa7\x74\xb1\x81\xdb\xb8\xef\x07\x67\x0a\x1b\xbd\x94\xee\x2f\x04\xff\xaf\xdc\x91\x45\x91\x41\x3d\x59\xf5\x66\xa0\x46\xe0\xce\x64\x73\x1b\xff\x83\x4f\xe6\x5d\x33\xef\xf8\xba\x17\x96\xfd\x7d\x68\x5e\x65\x30\x95\xcf\x5c\x55\x61\xd5\x43\x94\x62\xf4\xe8\x8a\x39\xf2\x7c\xa7\x4d\xf8\xad\x99\x85\x69\xd4\xf9\x9b\x46\x25\xf4\x27\xd0\xb6\x8d\x8a\x24\xa9\xea\xfd\x7b\xad\x01\xe3\x43\x5c\xfd\xcd\x66\x98\x66\x7f\xf1\xff\x00\x00\x00\xff\xff\x06\x8f\xd7\x8a\x48\x1a\x00\x00")

func BindownSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_BindownSchemaJson,
		"../../bindown.schema.json",
	)
}

func BindownSchemaJson() (*asset, error) {
	bytes, err := BindownSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../bindown.schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../bindown.schema.json": BindownSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"bindown.schema.json": &bintree{BindownSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
