// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schemafiles generated by go-bindata.// sources:
// ../../bindown.schema.json
package schemafiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _BindownSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdf\x6f\xe3\xb8\x11\x7e\xcf\x5f\x31\xf0\x15\xf0\x8b\x23\xe7\xba\x8b\xf4\x90\xb7\xe0\x16\xbd\x06\x38\x20\x45\x37\xdd\x43\xd1\x1c\xb2\x94\x34\xb2\xb8\xa1\x48\x95\xa4\xec\xa8\x81\xff\xf7\x62\x28\x4a\xd6\x0f\xca\x76\xb6\x8b\x45\x9b\x97\xd8\xe2\x68\xf8\x71\xf8\xcd\xcc\x47\xfa\xf5\x02\x60\xf1\x07\x9e\x2e\x6e\x60\x91\x5b\x5b\x9a\x9b\xf5\x7a\xc7\x85\x60\x31\x4f\xd1\x44\x1b\x6e\xf3\x2a\x8e\xb8\x5a\xc7\x5c\xa6\x6a\x27\xdb\xff\x91\x49\x72\x2c\x58\xf4\xc5\x28\xb9\x58\x39\x27\xcd\x93\xd6\xd1\xcd\x7a\x4d\x63\x97\xde\x4e\xe9\xcd\x3a\xd5\x2c\xb3\x97\x57\x7f\x5a\x37\xcf\x7e\x68\xde\x4b\x31\xe3\x92\x5b\xae\xa4\x59\xdc\x00\xe1\x71\x0f\x4b\x94\x29\xca\xa4\xee\x9e\x01\x2c\x4a\xad\x4a\xd4\x96\xa3\xe9\x3d\x05\x58\x30\x9d\xe4\x7c\x8b\x4f\x25\xb3\xf9\x60\xc4\x79\x32\x89\xe6\x25\xf9\x27\x68\x0f\x39\x02\x99\x01\x97\x60\x73\x04\x5a\x8b\x50\x2c\xc5\x14\xbc\x17\xd8\xe5\xa8\xd1\x0d\xc6\x5c\x32\x5d\x03\x37\x20\x54\xc2\x2c\xa6\x11\x7c\xc0\x8c\x55\xc2\xd2\xb3\x68\xfd\x58\x5d\x5d\xbd\x4b\x62\x2e\xdd\x07\x74\xeb\xe9\x26\xb6\x75\x89\x34\xa3\xb1\x9a\xcb\xcd\xa2\x1b\xda\x1f\xac\x16\x31\x97\x67\xe0\x95\xac\x40\x50\x59\x1f\x92\x55\x10\x23\x70\x69\x2c\x13\x62\x84\xcb\x8e\x5e\x39\xc4\x32\x7a\x3b\x42\xc1\xe5\xf3\x09\x88\xbf\xe5\x68\x73\xd4\x84\x29\xd1\xc8\x2c\x02\x03\x53\x17\xf4\x26\x3d\xf3\xa8\x1d\x58\x64\x29\xa1\x4a\x54\x59\x73\xb9\x01\x6e\x67\x10\xc5\x4a\x09\x64\x32\x0c\x49\x6d\x51\x6b\x62\xe7\x18\x17\x4b\x53\xc7\x23\x26\xee\x2c\x16\x34\x9c\x31\x61\x70\x75\x04\xfb\x7d\xeb\x0b\x98\x10\x6a\x67\xa0\x56\x15\x81\x6e\xe7\x80\x2d\x13\x15\x1a\x1f\x43\xc2\xac\x1a\xde\x28\x03\x4c\x7a\xce\x58\x4c\x6c\xa5\xbb\x78\x5b\xa6\x37\x68\xc1\xd4\xc6\x62\x31\x5a\x20\xf7\xc0\xfa\xb8\x29\x77\x34\x66\x04\xe7\x87\x75\x2f\x1b\xd6\x2d\x88\x45\xcf\x78\x1f\x8c\x17\xd3\x9a\xd5\xe1\x68\x69\xfc\x57\xc5\x35\xa6\x4f\x5b\xa6\xcf\x88\xd8\x08\xd8\x1c\x45\xc6\x40\x46\x61\xbd\x05\xc1\x8d\xa5\x80\x6c\x99\xe6\x2c\x16\x48\xb4\x64\x16\x8a\xca\x58\x62\x6e\xa9\xd1\xa0\xb4\x90\x29\x0d\x4c\xb6\x44\xa6\xc8\x9b\x2a\x49\x10\xd3\x30\x2f\x8e\xac\xd3\x54\xb1\xb1\xdc\x56\xc3\x42\x32\x59\xe7\x5f\xc3\x25\xe4\x7c\xab\xa3\x41\x19\x85\xa5\x67\xab\xe2\x2f\x98\xd8\xb3\x03\xf8\xb1\xbf\x1a\xa0\x82\x0c\xdd\x02\x3b\x52\x66\x5a\x15\x14\x60\x33\x22\x19\xbe\xb0\xa2\x14\x0e\xfb\x3f\x07\x68\x26\x2b\x21\xfa\x06\x56\x08\xb0\x78\xf7\xd3\x35\xe1\xe0\xf4\x7f\x35\x1d\x66\x45\x7a\xfd\x9e\x0c\x5e\x7e\xba\x7e\xba\x7e\xbf\x18\x59\xec\xc7\xaf\x2c\x54\x28\x92\xb4\x6e\xa6\x77\xae\x08\x2e\x3e\x34\x9f\x02\x93\x09\x2e\xab\x17\x32\xf9\xd5\x7d\x08\x58\xec\x5c\x53\x32\xae\x1a\xf9\x8f\x63\x44\x17\x73\xdf\x7e\x0f\x32\x6d\xbc\x5f\x03\xaa\xb9\xcc\xfe\x6e\xc9\xf4\xab\x4f\x25\x3f\x2d\xd8\x9c\x9b\x5e\x51\xa7\x92\xff\x2c\xd5\x4e\x36\xd9\x53\x96\x4a\xdb\x37\x67\x8f\xc5\xa2\x14\xcc\xe2\x89\x52\x7f\x0b\xad\xa1\xcb\xdc\x11\x92\x08\x6e\x65\x0d\x95\x34\x68\x21\xe3\x28\x52\xd3\x74\xd9\x21\x5c\x47\xe6\x18\x81\xac\xe2\x7a\xc0\x65\x57\x3d\xfd\x04\x11\x1c\x6a\x73\xdb\xab\x0f\x4e\xa8\xf6\x72\x6b\x0e\x70\x98\x46\x48\x94\x4c\x98\xe5\x92\x3a\x35\xec\xb8\xcd\x07\x0e\x97\xa6\xab\xea\x06\x12\x55\x50\x31\xcf\xb8\x36\x36\x82\x4f\x4c\x37\xe5\x7c\x50\x44\x9c\xcf\x58\xd9\x9c\xac\x63\x2e\xfb\x4e\x0f\x50\x96\xa6\x59\x02\x58\xf6\x4c\x2e\x4b\x8d\x09\xd2\x08\x46\x8f\xf2\xed\xfd\xb6\xd2\xe2\x0c\x45\x50\x69\x57\x2b\x5b\xf1\x02\xac\x1f\x1b\x0a\xe5\x57\x74\xfa\xe3\xfd\xe1\x58\xdd\x54\x12\xef\xb3\x49\xb1\x99\x96\x9b\x13\xa5\x33\x50\x36\x8e\x78\x90\x55\x11\xa3\x3e\x9e\xe6\xbf\xff\xd7\xfd\x2a\x61\x92\xb8\x5a\x19\x4c\x89\x85\xcb\x4a\x8b\xe5\x0a\x96\x7d\xc1\xb9\x74\xcc\x59\xc6\x5c\x2e\xa3\x47\xf9\xb0\x53\x3d\x1f\xc4\x20\x26\x76\xac\x36\xc0\x52\xd2\x98\x31\x23\x4f\x5e\x43\x24\x95\xd6\xd4\x04\x51\x6e\xb9\x56\xb2\x40\x69\x6f\x60\xa9\x8c\xf7\x48\x93\x2c\x23\x78\xc8\x95\x69\xf8\xed\x74\x47\x89\x9a\x38\xbe\xf1\xe5\x60\xaa\x42\x18\x65\x5b\xe6\xe8\x1a\xd7\xb0\x51\x4b\x03\xbf\xdc\xdf\x7f\x74\x86\xbf\xdc\xdf\xfe\xed\xe7\xbf\x1c\x00\x46\x70\x07\x26\x57\x95\x48\x21\x55\x49\x45\x08\x60\x47\xeb\xb6\xdd\xa4\x46\x15\xe8\x14\x71\xf4\x28\xff\xa1\x2a\x17\x11\x8d\x19\x6a\xa2\x38\xb0\xce\x17\x54\x86\x50\x6d\x94\x60\x72\x73\xc8\x4b\x53\x4b\xcb\x5e\x22\xf8\xb3\xd2\xe0\xfb\xd2\xca\x89\xac\xc4\xcd\x9a\xb3\x2d\x39\x21\x3e\x53\x3d\xb0\x0a\x3e\xb7\xa7\x10\x6f\xed\x4e\x0e\x45\x7d\xe0\xf7\x7a\xfb\xfa\x1a\x6d\x51\x1b\xae\xe4\x7e\x3f\x18\xba\x7c\x7d\x8d\x94\xd9\xef\xe9\x3f\xc5\x64\xbf\x8f\x2c\xd3\xd1\xe6\xdf\x9f\x23\x80\xbb\xcc\xcd\xdb\xc4\xc6\xc5\x72\xcb\x34\x2c\xbd\xa7\x1b\xf8\x31\xfa\x63\xf4\xae\x09\xbd\xae\x24\xf8\x73\x0e\xed\x15\x83\xeb\xf7\x10\x73\x0b\xae\xff\xf8\xc0\xaf\x80\xdb\xa6\x96\x75\x59\x78\x06\x74\x37\xc9\x10\xb3\xeb\x6e\x97\xae\xa1\x76\x68\xe7\x2a\xc7\xa4\x2b\x5d\x8c\xc8\x1d\xb4\xf4\xa3\x9d\x70\xee\x1f\xa9\x66\x32\x7c\x20\x9c\x67\xcf\x5d\xc1\x53\x1a\xcc\x0b\xda\x9e\xfd\xb1\x6c\xfc\xd4\xb4\x84\xbe\x0c\xb7\xee\xd8\xe6\xb2\xa5\xe7\x24\x58\xc7\x0a\x66\x93\x1c\xf5\x99\xa5\xec\xe4\x09\xe1\x83\xfb\x1a\xa3\x81\x5d\xce\x93\x7c\xd8\x85\x3b\x7c\xac\x2c\x05\x77\x98\x87\x2b\x9b\x89\x1c\x1c\x11\x5f\x73\xed\xbf\x9f\xe4\x2e\x38\x6e\xa1\x11\xfc\x96\xa3\x04\x81\x99\x05\x2c\x4a\x5b\xaf\xe8\x24\x33\x32\x6e\x2c\x27\xc2\x69\x5e\x28\xd2\xdf\xf4\x89\x97\x85\x53\xfd\xd5\x09\xc2\xf0\x90\x2e\x66\x07\xa6\xd2\x71\x58\xb5\x61\x2c\xd0\x60\xfe\x14\x05\x5f\xd1\x60\xe6\xb4\x51\xc0\x38\x2c\x61\xe7\x76\x6b\x5c\xa7\x4f\xee\xd8\xf4\x85\x6f\xb7\x6b\xad\x3c\x0e\xee\x42\x3a\xa7\xbb\x3b\xe5\xfd\x7f\xb3\x43\x01\x09\x03\x6f\x38\xd8\xcd\xef\xe6\xb6\xab\x48\x7e\x0b\x49\xe8\xba\x8f\xb4\x61\x8d\xfe\x73\xbd\xc0\x0f\xdf\x65\xae\x33\xd2\x63\xaf\x20\xb8\xb4\xa8\x4b\x8d\x24\x4d\x99\x01\x06\x1f\xb1\xf8\x84\xfa\xd0\x45\x62\x04\xeb\x6e\x4f\xdc\xb8\xa9\x42\x5b\x7f\x34\xb0\x27\x43\x1b\x08\xee\xf1\xf0\x86\x76\x63\x52\xaa\x3b\xb9\x74\x88\x8d\x10\x3d\x09\xd4\xf4\xdb\x4e\xc3\xfb\xea\xdc\x5c\x04\xb8\x2f\x47\xef\xa8\xe0\x24\xe1\x83\x81\xf0\x4d\x3d\xf8\x82\x33\xf8\x31\xba\x8a\xae\x82\x9c\x77\x83\x01\xce\x4f\x59\x3f\x56\x9b\xa1\x3c\x98\x3f\xfe\x0f\xdf\x0e\x5f\xeb\x9c\x6e\xf7\xed\xed\xce\x60\xa5\x5d\x0b\x5c\x05\x5b\xf5\xc5\x08\x6c\x58\x33\x5c\xf8\x69\x42\x2d\x6c\x91\xb0\x24\x1f\xc8\x88\xb4\xb9\x7e\x24\x2f\xd1\x3a\xf2\xda\xa9\x9b\x3f\x74\x84\x49\xb9\xc6\xc4\x2a\x5d\xfb\xfb\xd6\x56\x6f\xb9\x64\x70\xfe\x3b\x61\xd5\x9c\xcd\xf0\xc5\x6a\x96\x50\x7e\x64\xdc\x49\xd7\x07\xea\xc0\xdc\x80\x46\xc1\x2c\xdf\x62\x7b\xd9\x38\xf6\xec\xa4\xb6\x92\x19\xdf\x54\x54\x61\x95\x74\x0e\x40\xa3\x71\x57\xdc\x7e\x32\x92\xf2\xa6\x15\xc3\x5e\xb3\x57\x06\x61\xdd\xa4\x6b\x8a\x82\x17\xdc\xa2\x06\xdc\xa2\x53\x85\xfe\xa2\x01\x94\x06\xe5\xee\x3f\xa7\x15\xfc\x30\xbf\x6c\x10\x1e\xbc\x70\x23\x97\x16\xd6\x7d\xa5\x17\x4c\xdf\x56\xbb\x75\xfb\x37\x2c\x5d\xa7\x4b\xdb\x69\x29\x36\x21\xd5\x44\x01\x1d\xa6\x06\xb6\x65\x5c\x38\xbd\x9f\x29\xdd\x6d\x9a\x55\xed\x15\x5e\x34\x5d\x4e\x48\x8a\x7a\xeb\xa7\x6e\xaf\x66\xc9\x14\xf3\x73\x79\xe4\x0e\x6c\x2d\x22\x3f\x81\x69\xc8\x02\x56\x7d\x3b\xbe\x4c\xb0\xff\xaf\x73\x67\x7a\x5f\x75\xf4\xae\x6a\xa6\x8d\xcc\xf2\x43\x8c\xee\xa7\xfa\x54\x6d\x83\x32\xbe\x97\x0a\xb5\x9d\x16\x6e\x7b\x76\x7c\x32\xaa\xd2\xc9\x5b\xe9\xfe\x46\xf0\x7f\x2f\x0d\xb5\xdd\x02\xfc\x64\xcd\xbd\x96\x47\x60\xce\x64\x73\x67\xff\x9d\x33\xf3\xa1\x9d\x77\x7a\x59\x11\xd7\xc3\x7d\x68\x2f\xe2\x88\xca\x67\xae\xaa\xd2\xe2\x29\xc9\x31\x79\x36\xd5\x1c\x79\xbe\xd1\x26\xfc\xdc\xce\x42\x34\xea\xfd\x22\xd7\x14\xfa\x13\x68\xbb\x46\x65\xb9\x15\xcd\xaf\x47\xbe\x06\x4c\x93\xb8\xf9\xc5\x71\xec\x66\x7f\xf1\x9f\x00\x00\x00\xff\xff\x10\xa5\xea\xa0\x06\x1d\x00\x00")

func BindownSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_BindownSchemaJson,
		"../../bindown.schema.json",
	)
}

func BindownSchemaJson() (*asset, error) {
	bytes, err := BindownSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../bindown.schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../bindown.schema.json": BindownSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"bindown.schema.json": &bintree{BindownSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
