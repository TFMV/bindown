// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schemafiles generated by go-bindata.// sources:
// ../../bindown.schema.json
package schemafiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _BindownSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdf\x8f\xdb\xb8\x11\x7e\xdf\xbf\x62\xe0\x2b\xe0\x17\xaf\x9c\x36\xc1\xf6\xb0\x6f\x8b\x0b\x7a\x0d\x70\xc0\x16\xbd\xed\x05\x45\x37\xd8\x50\xd2\xc8\x62\x42\x91\x2a\x39\xb2\x57\x5d\xf8\x7f\x2f\x86\xa2\x64\x59\x3f\x6c\x27\x4d\x0f\xc9\x8b\xbd\xe2\x78\xf8\x71\xf8\xf1\x9b\x8f\xca\xcb\x15\xc0\xe2\x0f\x32\x5d\xdc\xc2\x22\x27\x2a\xdd\xed\x7a\xbd\x93\x4a\x89\x58\xa6\xe8\xa2\x8d\xa4\xbc\x8a\x23\x69\xd6\xb1\xd4\xa9\xd9\xe9\xf6\x33\x72\x49\x8e\x85\x88\x3e\x39\xa3\x17\x2b\x9f\xa4\x79\xd2\x26\xba\x5d\xaf\x79\xec\x3a\xc4\x19\xbb\x59\xa7\x56\x64\x74\xfd\xea\xcf\xeb\xe6\xd9\x0f\xcd\xef\x52\xcc\xa4\x96\x24\x8d\x76\x8b\x5b\x60\x3c\xfe\x61\x89\x3a\x45\x9d\xd4\xdd\x33\x80\x45\x69\x4d\x89\x96\x24\xba\xde\x53\x80\x85\xb0\x49\x2e\xb7\xf8\x54\x0a\xca\x8f\x46\x7c\x26\x97\x58\x59\x72\x7e\x86\xf6\x90\x23\x70\x18\x48\x0d\x94\x23\xf0\x5a\x94\x11\x29\xa6\x10\xb2\xc0\x2e\x47\x8b\x7e\x30\x96\x5a\xd8\x1a\xa4\x03\x65\x12\x41\x98\x46\xf0\x16\x33\x51\x29\xe2\x67\xd1\xfa\xb1\x7a\xf5\xea\x75\x12\x4b\xed\xbf\xa0\x5f\x4f\x37\x31\xd5\x25\xf2\x8c\x8e\xac\xd4\x9b\x45\x37\xb4\x3f\x44\x2d\x62\xa9\x2f\xc0\xab\x45\x81\x60\xb2\x3e\x24\x32\x10\x23\x48\xed\x48\x28\x35\xc0\x45\x83\x9f\x1c\x6a\x19\x7d\x39\x42\x25\xf5\xe7\x33\x10\xdf\xe7\x48\x39\x5a\xc6\x94\x58\x14\x84\x20\xc0\xd5\x05\xff\x92\x9f\x05\xd4\x1e\x2c\x8a\x94\x51\x25\xa6\xac\xa5\xde\x80\xa4\x19\x44\xb1\x31\x0a\x85\x9e\x86\x64\xb6\x68\x2d\xb3\x73\x88\x4b\xa4\xa9\xe7\x91\x50\xef\x08\x0b\x1e\xce\x84\x72\xb8\x3a\x81\xfd\xbe\xcd\x05\x42\x29\xb3\x73\x50\x9b\x8a\x41\xb7\x73\xc0\x56\xa8\x0a\x5d\xa8\x21\x63\x36\x0d\x6f\x8c\x03\xa1\x03\x67\x08\x13\xaa\x6c\x57\x6f\x12\x76\x83\x04\xae\x76\x84\xc5\x60\x81\x32\x00\xeb\xe3\xe6\xb3\x63\x31\x63\x38\x3f\xac\x7b\xa7\x61\xdd\x82\x58\xf4\x82\xf7\x93\xf5\x12\xd6\x8a\x7a\xba\x5a\x16\xff\x5d\x49\x8b\xe9\xd3\x56\xd8\x0b\x2a\x36\x00\x36\x47\x91\x21\x90\x41\x59\xef\x40\x49\x47\x5c\x90\xad\xb0\x52\xc4\x0a\x99\x96\x82\xa0\xa8\x1c\x31\x73\x4b\x8b\x0e\x35\x41\x66\x2c\x08\xdd\x12\x99\x2b\xef\xaa\x24\x41\x4c\xa7\x79\x71\x62\x9d\xae\x8a\x1d\x49\xaa\x8e\x85\x64\xb4\xce\xbf\x4d\x4b\xc8\xe5\x51\x27\x8b\x32\x28\x4b\x2f\xd6\xc4\x9f\x30\xa1\x8b\x0b\xf8\x6b\x7f\x35\xc0\x82\x0c\xdd\x02\x3b\x52\x66\xd6\x14\x5c\x60\x37\x20\x19\x3e\x8b\xa2\x54\x1e\xfb\xbf\x8e\xd0\x8c\x56\xc2\xf4\x9d\x58\x21\xc0\xe2\xf5\x8f\x37\x8c\x43\xf2\xe7\x6a\x3c\x2c\x8a\xf4\xe6\x0d\x07\x3c\xff\x78\xf3\x74\xf3\x66\x31\x88\xd8\x0f\x7f\xb2\x30\x53\x95\xe4\x75\x0b\xbb\xf3\x22\xb8\x78\xdb\x7c\x9b\x98\x4c\x49\x5d\x3d\x73\xc8\x2f\xfe\xcb\x44\xc4\xce\x37\x25\xe7\xd5\x28\x7c\x1d\x22\xba\x9a\xfb\xeb\xc3\x24\xd3\x86\xfb\xd5\xa7\x1a\x61\x51\x2a\x41\x78\x46\x17\xef\xa0\x0d\xf4\x34\xa7\x5c\xba\xbe\x16\xc3\x9d\xae\xa1\xd2\x0e\x09\x32\x89\x2a\x75\x4d\x4b\x3a\x0a\x6a\x76\x3e\x46\xe0\xa8\xb8\x3e\xda\x78\x2f\x35\x61\x82\x08\x0e\x42\xd6\x36\xb6\x43\x12\x16\x2a\x49\xee\x00\x47\x58\x84\xc4\xe8\x44\x90\xd4\xdc\xd6\x60\x27\x29\x3f\x4a\xb8\x74\x9d\x04\x3a\x48\x4c\xc1\xca\x97\x49\xeb\x28\x82\xdf\x84\x6d\xb4\xef\xe8\xc4\xf9\x9c\xb1\xa1\x9c\xa3\x63\xa9\xfb\x49\x0f\x50\x96\xae\x59\x02\x90\xf8\xcc\x29\x4b\x8b\x09\xf2\x08\x46\x8f\xfa\xcb\x9b\x53\x65\xd5\x05\xed\xb3\xb2\x5e\x58\xda\x4e\x0f\xa2\x5f\x1b\x2e\xe5\x57\xb4\xc5\xd3\x62\x7a\x4a\x64\x8c\xc6\xfb\x6c\x74\x32\xc7\x67\xf3\x8c\xce\x4c\x9c\xb1\x13\x19\x74\x55\xc4\x68\x4f\x9f\x89\x0f\xff\xb3\xb8\x27\x42\x33\x57\x2b\x87\x29\xb3\x70\x59\x59\xb5\x5c\xc1\xb2\xef\xce\x96\x9e\x39\xcb\x58\xea\x65\xf4\xa8\x1f\x76\xa6\x97\x83\x19\x24\xd4\x4e\xd4\x0e\x44\xca\x86\x2c\x16\x9c\x29\x34\xdc\xa4\xb2\x96\x3b\x06\xea\xad\xb4\x46\x17\xa8\xe9\x16\x96\xc6\x85\x8c\x3c\xc9\x32\x82\x87\xdc\xb8\x86\xdf\xbe\x49\x97\x68\x99\xe3\x9b\xd0\x8c\xc7\x2d\x5b\xf0\x69\xcb\x3c\x5d\xe3\x1a\x36\x66\xe9\xe0\xe7\xfb\xfb\x5f\x7d\xe0\xcf\xf7\x77\x7f\xff\xe9\xaf\x07\x80\x11\xbc\x03\x97\x9b\x4a\xa5\x90\x9a\xa4\x62\x04\xb0\xe3\x75\x53\x37\xa9\x33\x05\x7a\xfb\x18\x3d\xea\x7f\x9a\xca\x57\xc4\x62\x86\x96\x29\x0e\xa2\xcb\x05\x95\x63\x54\x1b\xa3\x84\xde\x1c\xce\xa5\xab\x35\x89\xe7\x08\xfe\x62\x2c\x04\x11\x5f\x79\x47\x92\xf8\x59\x73\xb1\xe5\x24\xcc\x67\xd6\x03\x32\xf0\xb1\xb5\xec\x21\xda\xdb\xec\xa2\x3e\xf0\x7b\xbd\x7d\x79\x89\xb6\x68\x9d\x34\x7a\xbf\x3f\x1a\xba\x7e\x79\x89\x8c\xdb\xef\xf9\x93\x6b\xb2\xdf\x47\x24\x6c\xb4\xf9\xcf\xc7\x08\xe0\x5d\xe6\xe7\x6d\x6a\xe3\x6b\xb9\x15\x16\x96\x21\xd3\x2d\xfc\x31\xfa\x53\xf4\xba\x29\xbd\xad\x34\x84\x4b\x01\xef\x95\x80\x9b\x37\x10\x4b\x02\x2f\xd6\xa1\xf0\x2b\x90\xd4\x68\x59\x77\x0a\x2f\x80\xee\x27\x39\xc6\xec\x5b\xc1\xb5\xef\x3e\x1d\xda\x39\xe5\x18\x49\xf8\xd5\x80\xdc\x93\x91\x61\xb4\x73\x99\xfd\xfb\xc7\xcc\x09\x3f\x72\x99\xb3\x97\x94\xc9\x2b\x0d\xcc\xbb\xbf\x5e\xfc\xa9\xd3\xf8\x5b\xd3\x12\xfa\x9e\x95\xfc\x1d\xc7\x9f\x96\x5e\x92\x49\x1d\x2b\x04\x25\x39\xda\x0b\xa5\xec\xac\x9d\x7e\xeb\xff\x8c\xd1\xc1\x2e\x97\x49\x1e\x76\xdf\x35\x6d\xad\xc3\x27\xca\x52\x49\x8f\xf9\x78\x65\x33\x95\x83\x13\x4e\x65\x08\xe0\x97\xa0\x4c\xfd\x43\xee\x8b\xe3\x17\x1a\xc1\xfb\x1c\x35\x28\xcc\x08\xb0\x28\xa9\x5e\xb1\xed\x1f\x04\x37\x91\x23\x97\x31\xef\xaa\xf8\xdf\xf8\x49\xf0\x50\x63\xb3\xd2\xb9\xa7\xe9\x21\x5b\xcc\x0e\x8c\x7d\xd6\xb1\x6a\xc3\xd0\xcd\xc0\xfc\x95\x03\xbe\xa2\xc1\xcc\xd9\xf0\x89\xe0\x69\xbf\x37\xb7\x5b\x43\x9d\x3e\xbb\x63\xe3\x1f\x7c\xbb\x5d\x6b\xbd\xe4\xe4\x2e\xa4\x73\x26\xb5\xb3\xa9\xdf\xef\x0e\x9d\xbd\x45\x9e\x17\xcc\xf6\x32\x79\x54\xcd\x4e\x44\x56\x93\x62\x77\x35\x58\xf6\xb4\xea\x5e\x85\x69\xa6\x44\x60\x91\x88\x24\x3f\x12\xe2\xb4\x79\xdb\xc1\x59\xa2\x75\x14\xba\x4f\x37\xff\x94\x09\x4c\xa5\xc5\x84\x8c\xad\xc3\xeb\x9d\xb6\x63\xf9\xa6\xe4\xf3\x77\xad\xa9\x71\xb7\xf8\x4c\x56\x24\x6c\x8e\x33\xe9\x9b\xff\x03\x6b\x98\x74\x60\x51\x09\x92\x5b\x6c\xdf\x6d\x0c\x33\x7b\xb3\x62\x74\x26\x37\x15\x73\xd4\x68\x9f\x00\x2c\x3a\xff\x46\x2d\x4c\xc6\x66\xc8\xb5\x76\x22\xb8\x9e\xca\x21\xac\xd9\x92\xb0\x43\x55\xb2\x90\x84\x16\x70\x8b\xbe\xaf\x86\x7b\x0d\x18\x0b\xc6\xbf\x6e\x19\x9f\x81\xc3\xfc\xba\x41\x78\xc8\x22\x9d\x5e\x12\xac\xfb\xbd\x72\x92\x5b\x6d\xf7\xeb\xf6\xef\x58\x8c\xcf\x7b\xdc\xf3\xcd\x6c\x44\xaa\x51\x0f\x39\x4c\x0d\x62\x2b\xa4\xf2\x8e\x89\xaf\x50\xed\xa6\x91\x69\xdf\x18\x44\xe3\xe5\x4c\x35\xf3\x10\xfd\xd4\xed\xd5\x2c\x99\x62\x79\x29\x8f\xbc\xe5\x6d\x11\x85\x09\x5c\x43\x16\x20\xf3\xed\xf8\x32\xc2\xfe\xbd\x73\xa7\xb5\xb3\x4f\xce\x54\x36\xf9\x52\xfe\x4c\x2b\xde\x2c\x5b\xfe\x51\x3a\xb2\x28\x0a\x08\x93\x35\x57\xed\x80\xc0\x5d\x48\x8f\x2e\xfe\x77\xa6\xfa\x43\x3b\xef\xf8\xfe\x14\xd7\xd0\x3f\x83\xdd\xbb\x01\xe6\xc6\x85\xab\xaa\xac\x7a\x4a\x72\x4c\x3e\xbb\xaa\xf8\xff\x6e\xc2\x4f\xed\x2c\xdc\xcc\x7b\x6f\xd4\x1b\xe5\x3c\x83\xb6\x53\x7e\x92\xa4\x9a\xb7\xbf\xe1\x50\x8d\x4f\x45\xf3\x3f\x06\xc3\x34\xfb\xab\xff\x06\x00\x00\xff\xff\x99\x7b\x9b\xd2\xc6\x18\x00\x00")

func BindownSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_BindownSchemaJson,
		"../../bindown.schema.json",
	)
}

func BindownSchemaJson() (*asset, error) {
	bytes, err := BindownSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../bindown.schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../bindown.schema.json": BindownSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"bindown.schema.json": &bintree{BindownSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
