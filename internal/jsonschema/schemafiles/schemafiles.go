// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schemafiles generated by go-bindata.// sources:
// ../../bindown.schema.json
package schemafiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _BindownSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdf\x6f\xdb\x36\x10\x7e\xcf\x5f\x71\x70\x07\xf8\xc5\x91\xbb\xb5\xc8\x8a\xbc\x05\x2d\xd6\x15\x28\x90\x61\x0d\x5a\x0c\x4b\x91\x52\xd2\xc9\x62\x4b\x91\x1a\x79\xb2\xa3\x05\xfe\xdf\x87\xa3\x7e\x58\x3f\x63\xb7\x28\x86\xe6\xc5\x8a\x78\xba\xfb\x78\xbc\xfb\xee\x93\x1e\xce\x00\x16\x3f\xc9\x78\x71\x09\x8b\x94\x28\x77\x97\xeb\xf5\x4e\x2a\x25\x42\x19\xa3\x0b\x36\x92\xd2\x22\x0c\xa4\x59\x87\x52\xc7\x66\xa7\x9b\xdf\xc0\x45\x29\x66\x22\xf8\xec\x8c\x5e\xac\xbc\x93\xea\x4e\xe3\xe8\x72\xbd\xe6\xb5\xf3\xda\xce\xd8\xcd\x3a\xb6\x22\xa1\xf3\xa7\xbf\xae\xab\x7b\x4f\xaa\xe7\x62\x4c\xa4\x96\x24\x8d\x76\x8b\x4b\x60\x3c\xfe\x66\x8e\x3a\x46\x1d\x95\xed\x3d\x80\x45\x6e\x4d\x8e\x96\x24\xba\xce\x5d\x80\x85\xb0\x51\x2a\xb7\x78\x97\x0b\x4a\x7b\x2b\xde\x93\x8b\xac\xcc\xd9\x3f\x43\xbb\x49\x11\xd8\x0c\xa4\x06\x4a\x11\x78\x2f\xca\x88\x18\x63\xa8\xbd\xc0\x2e\x45\x8b\x7e\x31\x94\x5a\xd8\x12\xa4\x03\x65\x22\x41\x18\x07\xf0\x0a\x13\x51\x28\xe2\x7b\xc1\xfa\xb6\x78\xfa\xf4\x59\x14\x4a\xed\x2f\xd0\xef\xa7\x0d\x4c\x65\x8e\x1c\xd1\x91\x95\x7a\xb3\x68\x97\xf6\x07\xab\x45\x28\xf5\x09\x78\xb5\xc8\x10\x4c\xd2\x85\x44\x06\x42\x04\xa9\x1d\x09\xa5\x06\xb8\x68\xf0\xc8\x21\x97\xc1\xd7\x23\x54\x52\x7f\x39\x02\xf1\x43\x8a\x94\xa2\x65\x4c\x91\x45\x41\x08\x02\x5c\x99\xf1\x93\x7c\xaf\x46\xed\xc1\xa2\x88\x19\x55\x64\xf2\x52\xea\x0d\x48\x9a\x41\x14\x1a\xa3\x50\xe8\x69\x48\x66\x8b\xd6\x72\x75\x0e\x71\x89\x38\xf6\x75\x24\xd4\x1b\xc2\x8c\x97\x13\xa1\x1c\xae\x1e\xc1\x7e\xdd\xf8\x02\xa1\x94\xd9\x39\x28\x4d\xc1\xa0\x9b\x18\xb0\x15\xaa\x40\x57\xe7\x90\x31\x9b\xaa\x6e\x8c\x03\xa1\xeb\x9a\x21\x8c\xa8\xb0\x6d\xbe\x49\xd8\x0d\x12\xb8\xd2\x11\x66\x83\x0d\xca\x1a\x58\x17\x37\xf7\x8e\xc5\x84\xe1\x3c\x59\x77\xba\x61\xdd\x80\x58\x74\x8c\xf7\x93\xf9\x12\xd6\x8a\x72\x3a\x5b\xae\x08\x1d\x49\x2a\xfa\x0d\x36\xca\xd8\x1f\xd3\xad\x75\xba\xd5\x23\xf5\x34\xc2\xdd\xb1\x35\xe1\x67\x8c\x68\x7e\x87\x83\xf3\x7a\xd7\xdd\x0d\x30\x51\x41\xbb\xc1\xf6\xb0\x12\x6b\x32\xd8\x0a\xeb\x06\xc9\xc7\x7b\x91\xe5\xca\x63\xff\xbb\x87\x66\xb4\x13\x3e\xd6\x89\x1d\x02\x2c\x9e\xbd\xb8\x60\x1c\x92\x7f\x57\xe3\x65\x91\xc5\x17\xcf\xd9\xe0\xfe\xc5\xc5\xdd\xc5\xf3\xc5\xc0\x62\x3f\x7c\x64\x61\xa6\x32\xc9\xfb\x16\x76\xe7\xc9\x61\xf1\xaa\xba\x9a\x08\xa6\xa4\x2e\xee\xd9\xe4\xad\xbf\x98\xb0\xd8\x79\xb2\x76\xbe\x4b\xeb\xcb\x21\xa2\xb3\xb9\xff\x3e\x4e\x56\xda\xf0\xbc\xba\xa5\x46\x98\xe5\x4a\x10\x1e\xe1\x8b\x2b\x68\x0c\x21\x31\x16\x28\x95\xae\xcb\x51\x70\xa5\x4b\x28\xb4\x43\x82\x44\xa2\x8a\x5d\x45\xd5\x3d\xa3\xea\xe4\x43\x04\xb6\x0a\xcb\xde\xc1\xfb\x16\xac\x03\x04\x70\x68\xf0\x86\xf0\x0f\x4e\xb8\x81\x25\xb9\x03\x1c\x61\x11\x22\xa3\x23\x41\x52\x33\xdd\xc3\x4e\x52\xda\x73\xb8\x74\x2d\x35\x38\x88\x4c\xc6\x8c\x90\x48\xeb\x28\x80\xf7\xc2\x56\x9c\xd0\xeb\x38\xef\x33\x34\x94\xb2\x75\x28\x75\xd7\xe9\x01\xca\xd2\x55\x5b\x00\x12\x5f\xd8\x65\x6e\x31\x42\x5e\xc1\xe0\x56\x7f\x3d\x69\x17\x56\x9d\x30\x56\x0a\xab\x98\xea\x9a\x09\x08\xa2\x9b\x1b\x4e\xe5\x37\x8c\x0b\xee\xba\x6f\x23\x19\xa3\xf1\x3a\x19\x75\xe6\xb8\x37\x8f\xf0\xcc\x44\x8f\x3d\xe2\x41\x17\x59\x88\xf6\xf1\x9e\xf8\x78\x2a\x37\x5d\x81\x92\x8e\x78\x0a\x6c\x85\x95\x22\x54\xc8\xb3\x58\x10\x44\x42\x73\xad\x16\x0e\x63\xae\xc2\x65\x61\xd5\x72\x05\xcb\xae\x6a\x59\xfa\xca\x59\x86\x52\x2f\x83\x5b\x7d\xb3\x33\x1d\x1f\x5c\x41\x42\xed\x44\xe9\x40\xc4\x2c\x54\x42\xc1\x9e\xea\x41\x14\x15\xd6\xa2\x26\x40\xbd\x95\xd6\xe8\x0c\x35\x5d\xc2\xd2\xb8\xda\x23\x07\x59\x06\x70\x93\x1a\x57\xd5\xb7\x1f\x5e\x39\x5a\xae\xf1\x4d\x3d\xa4\xc6\xa3\x4c\x70\xb7\x25\xbe\x5c\xc3\x12\x36\x66\xe9\xe0\xf5\xf5\xf5\x3b\x6f\xf8\xfa\xfa\xea\xcf\x97\xbf\x1f\x00\x06\xf0\x06\x5c\x6a\x0a\x15\x43\x6c\xa2\x82\x11\xc0\x8e\xf7\x4d\x6d\x50\x67\x32\xf4\xb2\x2a\xb8\xd5\x7f\x99\xc2\x67\xc4\x62\x82\x96\x4b\x1c\x44\xeb\x0b\x0a\xc7\xa8\x36\x46\x09\xbd\x39\xf4\xa5\x2b\x35\x89\xfb\x00\x7e\x33\x16\x6a\x12\x5f\xf9\x49\x1d\xf9\xa8\xa9\xd8\xb2\x13\xae\x67\xe6\x03\x32\xf0\xa9\x91\xb2\xb5\xb5\x97\x9f\x59\x79\xa8\xef\xf5\xf6\xe1\x21\xd8\xa2\x75\xd2\xe8\xfd\xbe\xb7\x74\xfe\xf0\x10\x18\xb7\xdf\xf3\x2f\xe7\x64\xbf\x0f\x48\xd8\x60\xf3\xef\xa7\x00\xe0\x4d\xe2\xe3\x56\xb9\xf1\xb9\xdc\x0a\x0b\xcb\xda\xd3\x25\xfc\x1c\xfc\x12\x3c\xab\x52\x6f\x0b\x0d\xb5\x58\xe6\xb3\x12\x70\xf1\x1c\x42\x49\xe0\xc9\xba\x4e\xfc\x0a\x24\x55\x5c\xd6\x76\xe1\x09\xd0\x7d\x90\x3e\x66\x3f\x0a\xce\xfd\xf4\x69\xd1\xce\x31\xc7\x88\xc2\xcf\x06\xc5\x3d\x69\x59\xaf\xb6\xea\xab\xab\xcb\x67\x3a\xbc\xa7\xbe\x66\xc5\xfb\xa4\xd4\x87\x79\x55\xd4\xb1\x7f\xac\x1b\xdf\x57\x23\xa1\xab\xe5\xc8\x6b\x7f\xdf\x2d\x1d\x27\x93\x3c\x96\x09\x8a\x52\xb4\x27\x52\xd9\x51\x99\xf9\xca\xff\x1b\xa2\x83\x5d\x2a\xa3\xb4\x3e\x7d\x57\x8d\xb5\x16\x9f\xc8\x73\x25\x3d\xe6\xfe\xce\x66\x32\x07\x8f\x28\x95\x21\x80\xb7\x35\x33\x75\x9b\xdc\x27\xc7\x6f\x34\x80\x0f\x29\x6a\x50\x98\x10\x60\x96\x53\xb9\x62\x39\x3c\x30\xae\x2c\x47\x2a\x63\x5e\x55\xf1\xdf\xf8\x4e\xad\xa1\xc6\x62\xa5\x55\x4f\xd3\x4b\x36\x9b\x5d\x18\xeb\xac\x3e\x6b\xc3\x50\xcd\xc0\xbc\x14\x87\x6f\x18\x30\x73\x32\x7c\xc2\x78\x5a\xef\xcd\x9d\xd6\x90\xa7\x8f\x9e\xd8\xf8\x81\xef\x77\x6a\x8d\x96\x9c\x3c\x85\x78\x4e\xa4\xb6\x32\xf5\xc7\x3d\xa1\xa3\x6f\x57\xc7\x09\xd3\xe2\x3f\x85\xb4\x18\xf7\xb2\xd9\x92\xc8\x6a\x92\xec\xce\x06\xdb\x9e\x66\xdd\xb3\x3a\xcc\x14\x09\x2c\x22\x11\xa5\x3d\x22\x8e\xab\xaf\x00\xec\x25\x58\x07\xf5\xf4\x69\xe3\x4f\x89\xc0\x58\x5a\x8c\xc8\xd8\xb2\xfe\xec\xd1\x4c\x2c\x3f\x94\xbc\xff\x76\x34\x55\xea\x16\xef\xc9\x8a\x88\xc5\x71\x22\xfd\xf0\xbf\x61\x0e\x93\x0e\x2c\x2a\x41\x72\x8b\xcd\x3b\xff\xd0\xb3\x17\x2b\x46\x27\x72\x53\x70\x8d\x1a\xed\x1d\x80\x45\xe7\xbf\x34\xd5\xc1\x58\x0c\xb9\x46\x4e\xd4\xaa\xa7\x70\x08\x6b\x96\x24\xac\x50\x95\xcc\x24\xa1\x05\xdc\xa2\x9f\xab\xf5\x7b\x0d\x18\x0b\xc6\x7f\x86\x18\xf7\xc0\x21\xbe\xae\x10\x1e\xbc\x48\xa7\x97\x04\xeb\xee\xac\x9c\xac\xad\x66\xfa\xb5\xe7\xd7\x27\xe3\xe3\x1a\xf7\xf8\x30\x1b\x15\xd5\x68\x86\x1c\x42\x83\xd8\x0a\xa9\xbc\x62\xe2\x57\xa8\xe6\xd0\xc8\x34\x9f\x84\x82\xf1\x76\xa6\x86\x79\x6d\x7d\xd7\x9e\xd5\x6c\x31\x85\xf2\xd4\x3a\xf2\x92\xb7\x41\x54\x07\x70\x55\xb1\x00\x99\xef\x57\x2f\x23\xec\x3f\x7a\xed\x34\x72\xf6\xff\x2e\x9c\x9b\x26\xee\xf8\x6d\x24\x2c\xa1\x5b\xd1\xed\x9b\x36\x67\xfa\xc4\x12\x2a\xac\xba\x8b\x52\x8c\xbe\xb8\x22\xfb\xca\x9d\x4d\x93\xf8\xec\x3e\x5e\x36\x51\x78\x34\x76\xbe\xdb\x56\x3c\x74\x04\x6d\xcb\xa3\x24\x49\x55\xdf\x18\xeb\x12\x1d\xd7\x58\xf5\x5d\x7a\xe8\x66\x7f\xf6\x5f\x00\x00\x00\xff\xff\x6f\x6a\x9d\xec\x2c\x17\x00\x00")

func BindownSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_BindownSchemaJson,
		"../../bindown.schema.json",
	)
}

func BindownSchemaJson() (*asset, error) {
	bytes, err := BindownSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../bindown.schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../bindown.schema.json": BindownSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"bindown.schema.json": &bintree{BindownSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
