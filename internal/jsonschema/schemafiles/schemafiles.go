// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schemafiles generated by go-bindata.// sources:
// ../../bindown.schema.json
package schemafiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _BindownSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5d\x6f\xdc\xb6\x12\x7d\xf7\xaf\x18\x28\x17\xd8\x97\xb5\x36\xf7\x26\xf0\x0d\xfc\x66\x24\x68\x1a\x20\x80\x8b\xc6\x48\x50\xd4\x81\x43\x49\xa3\x15\x13\x8a\x54\xc9\xd1\xae\x55\x63\xff\x7b\x31\xd4\xc7\xea\xd3\xeb\x04\x45\x51\xbf\xac\x2c\x8e\x86\x67\x86\x33\x67\x8e\xf4\x70\x06\x10\xfc\x47\x26\xc1\x25\x04\x19\x51\xe1\x2e\x37\x9b\xbd\x54\x4a\x44\x32\x41\x17\x6e\x25\x65\x65\x14\x4a\xb3\x89\xa4\x4e\xcc\x5e\xb7\xbf\xa1\x8b\x33\xcc\x45\xf8\xd5\x19\x1d\xac\xbd\x93\xfa\x4e\xeb\xe8\x72\xb3\xe1\xb5\xf3\xc6\xce\xd8\xed\x26\xb1\x22\xa5\xf3\xe7\xff\xdf\xd4\xf7\x9e\xd5\xcf\x25\x98\x4a\x2d\x49\x1a\xed\x82\x4b\x60\x3c\xfe\x66\x81\x3a\x41\x1d\x57\xdd\x3d\x80\xa0\xb0\xa6\x40\x4b\x12\x5d\xef\x2e\x40\x20\x6c\x9c\xc9\x1d\xde\x15\x82\xb2\xc1\x8a\xf7\xe4\x62\x2b\x0b\xf6\xcf\xd0\x6e\x32\x04\x36\x03\xa9\x81\x32\x04\x8e\x45\x19\x91\x60\x02\x8d\x17\xd8\x67\x68\xd1\x2f\x46\x52\x0b\x5b\x81\x74\xa0\x4c\x2c\x08\x93\x10\xde\x60\x2a\x4a\x45\x7c\x2f\xdc\xdc\x96\xcf\x9f\xbf\x88\x23\xa9\xfd\x05\xfa\x78\xba\x8d\xa9\x2a\x90\x77\x74\x64\xa5\xde\x06\xdd\xd2\xe1\x68\x15\x44\x52\x3f\x01\xaf\x16\x39\x82\x49\xfb\x90\xc8\x40\x84\x20\xb5\x23\xa1\xd4\x08\x17\x8d\x1e\x39\xe6\x32\xfc\x7e\x84\x4a\xea\x6f\x27\x20\x7e\xca\x90\x32\xb4\x8c\x29\xb6\x28\x08\x41\x80\xab\x72\x7e\x92\xef\x35\xa8\x3d\x58\x14\x09\xa3\x8a\x4d\x51\x49\xbd\x05\x49\x0b\x88\x22\x63\x14\x0a\x3d\x0f\xc9\xec\xd0\x5a\xae\xce\x31\x2e\x91\x24\xbe\x8e\x84\x7a\x47\x98\xf3\x72\x2a\x94\xc3\xf5\x23\xd8\xaf\x5b\x5f\x20\x94\x32\x7b\x07\x95\x29\x19\x74\xbb\x07\xec\x84\x2a\xd1\x35\x39\x64\xcc\xa6\xae\x1b\xe3\x40\xe8\xa6\x66\x08\x63\x2a\x6d\x97\x6f\x12\x76\x8b\x04\xae\x72\x84\xf9\x28\x40\xd9\x00\xeb\xe3\xe6\xde\xb1\x98\x32\x9c\x67\x9b\x5e\x37\x6c\x5a\x10\x41\xcf\xf8\x30\x9b\x2f\x61\xad\xa8\xe6\xb3\xe5\xca\xc8\x91\xa4\x72\xd8\x60\x93\x8c\xfd\x32\xdf\x5a\x4f\xb7\x7a\xa4\x9e\x26\xb8\x7b\xb6\x26\xfa\x8a\x31\x2d\x47\x38\x3a\xaf\x0f\xfd\x68\x80\x89\x0a\xba\x00\xbb\xc3\x4a\xad\xc9\x61\x27\xac\x1b\x25\x1f\xef\x45\x5e\x28\x8f\xfd\xf7\x01\x9a\x49\x24\x7c\xac\x33\x11\x02\x04\x2f\x5e\x5d\x30\x0e\xc9\xbf\xeb\xe9\xb2\xc8\x93\x8b\x97\x6c\x70\xff\xea\xe2\xee\xe2\x65\x30\xb2\x38\x8c\x1f\x09\xcc\x5c\x26\x39\x6e\x61\xf7\x9e\x1c\x82\x37\xf5\xd5\xcc\x66\x4a\xea\xf2\x9e\x4d\xde\xfb\x8b\x19\x8b\xbd\x27\x6b\xe7\xbb\xb4\xb9\x1c\x23\x3a\x5b\xfa\xef\xf3\x6c\xa5\x8d\xcf\xab\x5f\x6a\x84\x79\xa1\x04\xe1\x09\xbe\xb8\x82\xd6\x10\x52\x63\x81\x32\xe9\xfa\x1c\x05\x57\xba\x82\x52\x3b\x24\x48\x25\xaa\xc4\xd5\x54\x3d\x30\xaa\x4f\x3e\x42\x60\xab\xa8\x1a\x1c\xbc\x6f\xc1\x66\x83\x10\x8e\x0d\xde\x12\xfe\xd1\x09\x37\xb0\x24\x77\x84\x23\x2c\x42\x6c\x74\x2c\x48\x6a\xa6\x7b\xd8\x4b\xca\x06\x0e\x57\xae\xa3\x06\x07\xb1\xc9\x99\x11\x52\x69\x1d\x85\xf0\x51\xd8\x9a\x13\x06\x1d\xe7\x7d\x46\x86\x32\xb6\x8e\xa4\xee\x3b\x3d\x42\x59\xb9\x3a\x04\x20\xf1\x8d\x5d\x16\x16\x63\xe4\x15\x0c\x6f\xf5\xf7\x93\x76\x69\xd5\x13\xc6\x4a\x69\x15\x53\x5d\x3b\x01\x41\xf4\x73\xc3\xa9\xfc\x81\x71\xc1\x5d\xf7\x63\x24\x63\x34\x5e\xa7\x93\xce\x9c\xf6\xe6\x09\x9e\x99\xe9\xb1\x47\x3c\xe8\x32\x8f\xd0\x3e\xde\x13\x9f\x9f\xca\x4d\x57\xa0\xa4\x23\x9e\x02\x3b\x61\xa5\x88\x14\xf2\x2c\x16\x04\xb1\xd0\x5c\xab\xa5\xc3\x84\xab\x70\x55\x5a\xb5\x5a\xc3\xaa\xaf\x5a\x56\xbe\x72\x56\x91\xd4\xab\xf0\x56\xdf\xec\x4d\xcf\x07\x57\x90\x50\x7b\x51\x39\x10\x09\x0b\x95\x48\xb0\xa7\x66\x10\xc5\xa5\xb5\xa8\x09\x50\xef\xa4\x35\x3a\x47\x4d\x97\xb0\x32\xae\xf1\xc8\x9b\xac\x42\xb8\xc9\x8c\xab\xeb\xdb\x0f\xaf\x02\x2d\xd7\xf8\xb6\x19\x52\xd3\x51\x26\xb8\xdb\x52\x5f\xae\x51\x05\x5b\xb3\x72\xf0\xf6\xfa\xfa\x83\x37\x7c\x7b\x7d\xf5\xeb\xeb\x9f\x8f\x00\x43\x78\x07\x2e\x33\xa5\x4a\x20\x31\x71\xc9\x08\x60\xcf\x71\x53\xb7\xa9\x33\x39\x7a\x59\x15\xde\xea\xdf\x4c\xe9\x33\x62\x31\x45\xcb\x25\x0e\xa2\xf3\x05\xa5\x63\x54\x5b\xa3\x84\xde\x1e\xfb\xd2\x55\x9a\xc4\x7d\x08\x3f\x19\x0b\x0d\x89\xaf\xfd\xa4\x8e\xfd\xae\x99\xd8\xb1\x13\xae\x67\xe6\x03\x32\xf0\xa5\x95\xb2\x8d\xb5\x97\x9f\x79\x75\xac\xef\xcd\xee\xe1\x21\xdc\xa1\x75\xd2\xe8\xc3\x61\xb0\x74\xfe\xf0\x10\x1a\x77\x38\xf0\x2f\xe7\xe4\x70\x08\x49\xd8\x70\xfb\xe7\x97\x10\xe0\x5d\xea\xf7\xad\x73\xe3\x73\xb9\x13\x16\x56\x8d\xa7\x4b\xf8\x6f\xf8\xbf\xf0\x45\x9d\x7a\x5b\x6a\x68\xc4\x32\x9f\x95\x80\x8b\x97\x10\x49\x02\x4f\xd6\x4d\xe2\xd7\x20\xa9\xe6\xb2\xae\x0b\x9f\x00\xdd\x6f\x32\xc4\xec\x47\xc1\xb9\x9f\x3e\x1d\xda\x25\xe6\x98\x50\xf8\xd9\xa8\xb8\x67\x2d\x9b\xd5\x4e\x7d\xf5\x75\xf9\x42\x87\x0f\xd4\xd7\xa2\x78\x9f\x95\xfa\xb0\xac\x8a\x7a\xf6\x8f\x75\xe3\xc7\x7a\x24\xf4\xb5\x1c\x79\xed\xef\xbb\xa5\xe7\x64\x96\xc7\x72\x41\x71\x86\xf6\x89\x54\x76\x52\x66\xbe\xf1\xff\x46\xe8\x60\x9f\xc9\x38\x6b\x4e\xdf\xd5\x63\xad\xc3\x27\x8a\x42\x49\x8f\x79\x18\xd9\x42\xe6\xe0\x11\xa5\x32\x06\xf0\xbe\x61\xa6\x7e\x93\xfb\xe4\xf8\x40\x43\xf8\x94\xa1\x06\x85\x29\x01\xe6\x05\x55\x6b\x96\xc3\x23\xe3\xda\x72\xa2\x32\x96\x55\x15\xff\x4d\xef\x34\x1a\x6a\x2a\x56\x3a\xf5\x34\xbf\x64\xf3\xc5\x85\xa9\xce\x1a\xb2\x36\x8c\xd5\x0c\x2c\x4b\x71\xf8\x81\x01\xb3\x24\xc3\x67\x8c\xe7\xf5\xde\xd2\x69\x8d\x79\xfa\xe4\x89\x4d\x1f\xf8\xfb\x4e\xad\xd5\x92\xb3\xa7\x90\x2c\x89\xd4\x4e\xa6\xfe\x7b\x4f\xe8\xe4\xdb\xd5\x69\xc2\xb4\xf8\x47\x29\x2d\x26\x83\x6c\x76\x24\xb2\x9e\x25\xbb\xb3\x51\xd8\xf3\xac\x7b\xd6\x6c\x33\x47\x02\x41\x2c\xe2\x6c\x40\xc4\x49\xfd\x15\x80\xbd\x84\x9b\xb0\x99\x3e\xdd\xfe\x73\x22\x30\x91\x16\x63\x32\xb6\x6a\x3e\x7b\xb4\x13\xcb\x0f\x25\xef\xbf\x1b\x4d\xb5\xba\xc5\x7b\xb2\x22\x66\x71\x9c\x4a\x3f\xfc\x6f\x98\xc3\xa4\x03\x8b\x4a\x90\xdc\x61\xfb\xce\x3f\xf6\xec\xc5\x8a\xd1\xa9\xdc\x96\x5c\xa3\x46\x7b\x07\x60\xd1\xf9\x2f\x4d\xf5\x66\x77\xc7\xa7\x58\x16\xb9\x56\x58\x34\xfa\xa7\x74\x08\x1b\x16\x27\xac\x55\x95\xcc\x25\xa1\x05\xdc\xa1\x9f\xb0\xcd\x1b\x0e\x18\x0b\xc6\x7f\x90\x98\x76\xc3\x11\x89\xae\xb1\x1e\xbd\x48\xa7\x57\x04\x9b\xfe\xd4\x9c\xad\xb2\x76\x0e\x76\x27\x39\xa4\xe5\xd3\x6a\xf7\xf4\x58\x9b\x94\xd7\x64\x9a\x1c\xb7\x06\xb1\x13\x52\x79\xed\xc4\x2f\x53\xed\xf1\x91\x69\x3f\x0e\x85\xd3\x70\xe6\xc6\x7a\xab\xb5\xfe\xe9\x58\x6e\xda\x7d\xa7\x52\x39\xaa\xa0\x9f\xe4\xee\x35\x90\xcb\xe6\x89\x51\x95\x56\xdd\xc5\x19\xc6\xdf\x5c\x99\x7f\x67\x64\xf3\x0c\xb3\x18\xc7\xeb\x76\x17\xe6\xed\xde\x47\xc5\xba\x49\x4e\xa0\xed\x9a\x9c\x24\xa9\xfa\x03\x58\x73\x8e\xd3\x86\xa9\x3f\x9a\x8e\xdd\x1c\xce\xfe\x0a\x00\x00\xff\xff\x1e\x43\xef\xbb\xc9\x15\x00\x00")

func BindownSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_BindownSchemaJson,
		"../../bindown.schema.json",
	)
}

func BindownSchemaJson() (*asset, error) {
	bytes, err := BindownSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../bindown.schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../bindown.schema.json": BindownSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"bindown.schema.json": &bintree{BindownSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
