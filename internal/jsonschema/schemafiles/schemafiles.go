// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schemafiles generated by go-bindata.// sources:
// ../../bindown.schema.json
package schemafiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _BindownSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdf\x8f\xe3\xb6\x11\x7e\xdf\xbf\x62\xe0\x14\xf0\x8b\x4f\xbe\xf6\x0e\xdb\x60\xdf\x0e\x39\x34\x3d\x20\xc0\x16\xcd\x36\x41\xd1\x0d\x36\x94\x34\xb2\x98\xa3\x48\x95\x1c\xd9\xab\x2e\xfc\xbf\x17\x43\x51\xb2\x7e\xda\xde\xf4\x50\xdc\xbe\xd8\x2b\x8e\x66\x3e\x0e\x3f\x7e\x33\xa4\x5f\x6e\x00\x56\x7f\x90\xe9\xea\x0e\x56\x39\x51\xe9\xee\xb6\xdb\x83\x54\x4a\xc4\x32\x45\x17\xed\x24\xe5\x55\x1c\x49\xb3\x8d\xa5\x4e\xcd\x41\xb7\x9f\x91\x4b\x72\x2c\x44\xf4\x9b\x33\x7a\xb5\xf1\x4e\x9a\x27\xad\xa3\xbb\xed\x96\xc7\xde\x04\x3b\x63\x77\xdb\xd4\x8a\x8c\xde\xbc\xfd\xf3\xb6\x79\xf6\x4d\xf3\x5e\x8a\x99\xd4\x92\xa4\xd1\x6e\x75\x07\x8c\xc7\x3f\x2c\x51\xa7\xa8\x93\xba\x7b\x06\xb0\x2a\xad\x29\xd1\x92\x44\xd7\x7b\x0a\xb0\x12\x36\xc9\xe5\x1e\x9f\x4a\x41\xf9\x60\xc4\x7b\x72\x89\x95\x25\xfb\x67\x68\x0f\x39\x02\x9b\x81\xd4\x40\x39\x02\xcf\x45\x19\x91\x62\x0a\xc1\x0b\x1c\x72\xb4\xe8\x07\x63\xa9\x85\xad\x41\x3a\x50\x26\x11\x84\x69\x04\x1f\x31\x13\x95\x22\x7e\x16\x6d\x1f\xab\xb7\x6f\xdf\x25\xb1\xd4\xfe\x0b\xfa\xf9\x74\x81\xa9\x2e\x91\x23\x3a\xb2\x52\xef\x56\xdd\xd0\xf1\x64\xb5\x8a\xa5\xbe\x02\xaf\x16\x05\x82\xc9\xfa\x90\xc8\x40\x8c\x20\xb5\x23\xa1\xd4\x08\x17\x8d\x5e\x39\xe5\x32\x7a\x3d\x42\x25\xf5\xe7\x0b\x10\x7f\xce\x91\x72\xb4\x8c\x29\xb1\x28\x08\x41\x80\xab\x0b\x7e\x93\x9f\x05\xd4\x1e\x2c\x8a\x94\x51\x25\xa6\xac\xa5\xde\x81\xa4\x05\x44\xb1\x31\x0a\x85\x9e\x87\x64\xf6\x68\x2d\xb3\x73\x8c\x4b\xa4\xa9\xe7\x91\x50\x9f\x08\x0b\x1e\xce\x84\x72\xb8\x39\x83\xfd\xbe\xf5\x05\x42\x29\x73\x70\x50\x9b\x8a\x41\xb7\x31\x60\x2f\x54\x85\x2e\xe4\x90\x31\x9b\x86\x37\xc6\x81\xd0\x81\x33\x84\x09\x55\xb6\xcb\x37\x09\xbb\x43\x02\x57\x3b\xc2\x62\x34\x41\x19\x80\xf5\x71\xf3\xde\xb1\x98\x31\x9c\x6f\xb6\xbd\xdd\xb0\x6d\x41\xac\x7a\xc6\xc7\xd9\x7c\x09\x6b\x45\x3d\x9f\x2d\x8b\xff\xae\xa4\xc5\xf4\x69\x2f\xec\x15\x19\x1b\x01\x5b\xa2\xc8\x18\xc8\x28\xad\x1f\x40\x49\x47\x9c\x90\xbd\xb0\x52\xc4\x0a\x99\x96\x82\xa0\xa8\x1c\x31\x73\x4b\x8b\x0e\x35\x41\x66\x2c\x08\xdd\x12\x99\x33\xef\xaa\x24\x41\x4c\xe7\x79\x71\x66\x9e\xae\x8a\x1d\x49\xaa\x86\x42\x32\x99\xe7\xdf\xe6\x25\xe4\x7a\xab\xb3\x49\x19\xa5\xa5\x67\x6b\xe2\xdf\x30\xa1\xab\x13\xf8\x63\x7f\x36\xc0\x82\x0c\xdd\x04\x3b\x52\x66\xd6\x14\x9c\x60\x37\x22\x19\x3e\x8b\xa2\x54\x1e\xfb\xbf\x06\x68\x26\x33\x61\xfa\xce\xcc\x10\x60\xf5\xee\xdb\x5b\xc6\x21\xf9\x73\x33\x1d\x16\x45\x7a\xfb\x9e\x0d\x9e\xbf\xbd\x7d\xba\x7d\xbf\x1a\x59\x1c\xc7\xaf\xac\xcc\x5c\x26\x79\xde\xc2\x1e\xbc\x08\xae\x3e\x36\xdf\x66\x82\x29\xa9\xab\x67\x36\xf9\xc1\x7f\x99\xb1\x38\xf8\xa2\xe4\xbc\x1a\x85\xaf\x63\x44\x37\x4b\xff\xfd\x32\xcb\xb4\xf1\x7a\xf5\xa9\x46\x58\x94\x4a\x10\x5e\xd0\xc5\x0f\xd0\x1a\x7a\x9a\x53\x2e\x5d\x5f\x8b\xe1\x83\xae\xa1\xd2\x0e\x09\x32\x89\x2a\x75\x4d\x49\x1a\x18\x35\x2b\x1f\x23\xb0\x55\x5c\x0f\x16\xde\x4b\x4d\x08\x10\xc1\x49\xc8\xda\xc2\x76\x72\xc2\x42\x25\xc9\x9d\xe0\x08\x8b\x90\x18\x9d\x08\x92\x9a\xcb\x1a\x1c\x24\xe5\x03\x87\x6b\xd7\x49\xa0\x83\xc4\x14\xac\x7c\x99\xb4\x8e\x22\xf8\x49\xd8\x46\xfb\x06\x3b\xce\xfb\x8c\x0d\xe5\x6c\x1d\x4b\xdd\x77\x7a\x82\xb2\x76\xcd\x14\x80\xc4\x67\x76\x59\x5a\x4c\x90\x47\x30\x7a\xd4\xaf\x2f\x4e\x95\x55\x57\x94\xcf\xca\x7a\x61\x69\x2b\x3d\x88\x7e\x6e\x38\x95\xbf\xa3\x2c\x9e\x17\xd3\x73\x22\x63\x34\xde\x67\x93\x9d\x39\xdd\x9b\x17\x74\x66\x66\x8f\x9d\xf1\xa0\xab\x22\x46\x7b\x7e\x4f\xfc\xf2\x3f\x8b\x7b\x22\x34\x73\xb5\x72\x98\x32\x0b\xd7\x95\x55\xeb\x0d\xac\xfb\xdd\xd9\xda\x33\x67\x1d\x4b\xbd\x8e\x1e\xf5\xc3\xc1\xf4\x7c\x30\x83\x84\x3a\x88\xda\x81\x48\xb9\x21\x8b\x05\x7b\x0a\x05\x37\xa9\xac\xe5\x8a\x81\x7a\x2f\xad\xd1\x05\x6a\xba\x83\xb5\x71\xc1\x23\x07\x59\x47\xf0\x90\x1b\xd7\xf0\xdb\x17\xe9\x12\x2d\x73\x7c\x17\x8a\xf1\xb4\x64\x0b\xde\x6d\x99\xa7\x6b\x5c\xc3\xce\xac\x1d\x7c\x7f\x7f\xff\xa3\x37\xfc\xfe\xfe\xc3\xdf\xbf\xfb\xeb\x09\x60\x04\x9f\xc0\xe5\xa6\x52\x29\xa4\x26\xa9\x18\x01\x1c\x78\xde\xd4\x05\x75\xa6\x40\xdf\x3e\x46\x8f\xfa\x9f\xa6\xf2\x19\xb1\x98\xa1\x65\x8a\x83\xe8\x7c\x41\xe5\x18\xd5\xce\x28\xa1\x77\xa7\x7d\xe9\x6a\x4d\xe2\x39\x82\xbf\x18\x0b\x41\xc4\x37\xbe\x23\x49\x7c\xd4\x5c\xec\xd9\x09\xf3\x99\xf5\x80\x0c\xfc\xda\xb6\xec\xc1\xda\xb7\xd9\x45\x7d\xe2\xf7\x76\xff\xf2\x12\xed\xd1\x3a\x69\xf4\xf1\x38\x18\x7a\xf3\xf2\x12\x19\x77\x3c\xf2\x27\xe7\xe4\x78\x8c\x48\xd8\x68\xf7\x9f\x5f\x23\x80\x4f\x99\x8f\xdb\xe4\xc6\xe7\x72\x2f\x2c\xac\x83\xa7\x3b\xf8\x63\xf4\xa7\xe8\x5d\x93\x7a\x5b\x69\x08\x87\x02\x5e\x2b\x01\xb7\xef\x21\x96\x04\x5e\xac\x43\xe2\x37\x20\xa9\xd1\xb2\x6e\x17\x5e\x01\xdd\x07\x19\x62\xf6\xa5\xe0\x8d\xaf\x3e\x1d\xda\x25\xe5\x98\x48\xf8\xcd\x88\xdc\xb3\x96\x61\xb4\xeb\x32\xfb\xe7\x8f\x85\x1d\x3e\xe8\x32\x17\x0f\x29\xb3\x47\x1a\x58\xee\xfe\x7a\xf6\xe7\x76\xe3\x4f\x4d\x49\xe8\xf7\xac\xe4\xcf\x38\x7e\xb7\xf4\x9c\xcc\xea\x58\x21\x28\xc9\xd1\x5e\x29\x65\x17\xdb\xe9\x8f\xfe\xdf\x18\x1d\x1c\x72\x99\xe4\x61\xf5\x5d\x53\xd6\x3a\x7c\xa2\x2c\x95\xf4\x98\x87\x33\x5b\xc8\x1c\x9c\xe9\x54\xc6\x00\x7e\x08\xca\xd4\xdf\xe4\x3e\x39\x7e\xa2\x11\xfc\x9c\xa3\x06\x85\x19\x01\x16\x25\xd5\x1b\x6e\xfb\x47\xc6\x8d\xe5\xa4\xcb\x58\xee\xaa\xf8\x6f\xfa\x24\xf4\x50\xd3\x66\xa5\xeb\x9e\xe6\x87\x6c\xb1\x38\x30\xed\xb3\x86\xaa\x0d\xe3\x6e\x06\x96\x8f\x1c\xf0\x3b\x0a\xcc\x52\x1b\x3e\x63\x3c\xdf\xef\x2d\xad\xd6\x58\xa7\x2f\xae\xd8\xf4\x85\x2f\xb7\x6a\x6d\x2f\x39\xbb\x0a\xe9\x52\x93\xda\xb5\xa9\x5f\xef\x0a\x5d\x3c\x45\x5e\x16\xcc\xf6\x30\x39\xc8\x66\x27\x22\x9b\x59\xb1\xbb\x19\x4d\x7b\x5e\x75\x6f\x42\x98\x39\x11\x58\x25\x22\xc9\x07\x42\x9c\x36\xb7\x1d\xec\x25\xda\x46\xa1\xfa\x74\xf1\xe7\x9a\xc0\x54\x5a\x4c\xc8\xd8\x3a\x5c\xef\xb4\x15\xcb\x17\x25\xef\xbf\x2b\x4d\x4d\x77\x8b\xcf\x64\x45\xc2\xcd\x71\x26\x7d\xf1\x7f\x60\x0d\x93\x0e\x2c\x2a\x41\x72\x8f\xed\xdd\xc6\xd8\xb3\x6f\x56\x8c\xce\xe4\xae\x62\x8e\x1a\xed\x1d\x80\x45\xe7\x6f\xd4\x42\x30\x6e\x86\x5c\xdb\x4e\x84\xae\xa7\x72\x08\x5b\x6e\x49\xb8\x43\x55\xb2\x90\x84\x16\x70\x8f\xbe\xae\x86\x73\x0d\x18\x0b\xc6\x5f\xb7\x4c\xf7\xc0\x29\xbe\x6e\x10\x9e\xbc\x48\xa7\xd7\x04\xdb\x7e\xad\x9c\xe5\x56\x5b\xfd\xba\xf5\x1b\x8a\xf1\xe5\x1e\xf7\x72\x31\x9b\x90\x6a\x52\x43\x4e\xa1\x41\xec\x85\x54\xbe\x63\xe2\x23\x54\xbb\x68\x64\xda\x1b\x83\x68\x3a\x9d\xb9\x62\x1e\xac\x9f\xba\xb5\x5a\x24\x53\x2c\xaf\xe5\x91\x6f\x79\x5b\x44\x21\x80\x6b\xc8\x02\x64\xbe\x1c\x5f\x26\xd8\xbf\x76\xee\x04\x97\xf3\xb4\x99\xde\x33\x2d\x68\xdc\x22\x3f\xda\xc3\x47\x8b\xbc\x4f\xd5\x36\x29\xae\x2a\x4b\x63\x69\x8a\xb7\xa7\x8b\x2d\xdc\xb6\xfb\x7e\x72\xa6\xb2\xc9\x6b\xe9\xfe\x4a\xf0\xff\x28\x1d\x59\x14\x05\x84\x60\xcd\xcd\x40\x40\xe0\xae\x64\x73\x67\xff\x7f\xde\x99\x0f\x6d\xdc\xe9\x71\x2f\xae\x87\xeb\xd0\x5e\x65\x30\x95\xaf\x9c\x55\x65\xd5\x53\x92\x63\xf2\xd9\x55\x4b\xe4\xf9\x42\x8b\xf0\x5d\x1b\x85\x69\xd4\xfb\x01\xa0\x11\xfa\x0b\x68\xbb\x42\x45\x92\x54\x73\x59\x1d\x34\x60\xba\x89\x9b\x1f\x38\xc6\x6e\x8e\x37\xff\x0d\x00\x00\xff\xff\xfb\x16\x0a\x10\x75\x19\x00\x00")

func BindownSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_BindownSchemaJson,
		"../../bindown.schema.json",
	)
}

func BindownSchemaJson() (*asset, error) {
	bytes, err := BindownSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../bindown.schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../bindown.schema.json": BindownSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"bindown.schema.json": &bintree{BindownSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
