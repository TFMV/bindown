// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schemafiles generated by go-bindata.// sources:
// ../../bindown.schema.json
package schemafiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _BindownSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdf\x6f\xdb\x36\x10\x7e\xcf\x5f\x71\x50\x07\xf8\xc5\x91\xbb\xb5\xc8\x8a\xbc\x05\x2d\xd6\x15\x28\x90\x61\x0d\x5a\x0c\x4b\xd1\x52\xd2\xc9\x62\x4b\x91\x1a\x79\xb2\xa3\x05\xfe\xdf\x87\xa3\x7e\x58\x3f\xe3\xb4\x18\x86\xe5\xc5\x0e\x79\x3a\x7e\x77\xbc\xfb\xee\xb3\xee\xcf\x00\x82\x1f\x64\x12\x5c\x42\x90\x11\x15\xee\x72\xb3\xd9\x4b\xa5\x44\x24\x13\x74\xe1\x56\x52\x56\x46\xa1\x34\x9b\x48\xea\xc4\xec\x75\xfb\x19\xba\x38\xc3\x5c\x84\x5f\x9c\xd1\xc1\xda\x3b\xa9\x57\x5a\x47\x97\x9b\x0d\xef\x9d\x37\x76\xc6\x6e\x37\x89\x15\x29\x9d\x3f\xfd\x79\x53\xaf\x3d\xa9\x9f\x4b\x30\x95\x5a\x92\x34\xda\x05\x97\xc0\x78\xfc\x62\x81\x3a\x41\x1d\x57\xdd\x1a\x40\x50\x58\x53\xa0\x25\x89\xae\xb7\x0a\x10\x08\x1b\x67\x72\x87\x9f\x0a\x41\xd9\x60\xc7\x7b\x72\xb1\x95\x05\xfb\x67\x68\x37\x19\x02\x9b\x81\xd4\x40\x19\x02\xc7\xa2\x8c\x48\x30\x81\xc6\x0b\xec\x33\xb4\xe8\x37\x23\xa9\x85\xad\x40\x3a\x50\x26\x16\x84\x49\x08\xaf\x30\x15\xa5\x22\x5e\x0b\x37\xb7\xe5\xd3\xa7\xcf\xe2\x48\x6a\xff\x05\x7d\x3c\xdd\xc1\x54\x15\xc8\x27\x3a\xb2\x52\x6f\x83\x6e\xeb\x70\xb4\x0a\x22\xa9\x1f\x81\x57\x8b\x1c\xc1\xa4\x7d\x48\x64\x20\x42\x90\xda\x91\x50\x6a\x84\x8b\x46\x8f\x1c\x73\x19\x7e\x3b\x42\x25\xf5\xd7\x13\x10\x3f\x64\x48\x19\x5a\xc6\x14\x5b\x14\x84\x20\xc0\x55\x39\x3f\xc9\x6b\x0d\x6a\x0f\x16\x45\xc2\xa8\x62\x53\x54\x52\x6f\x41\xd2\x02\xa2\xc8\x18\x85\x42\xcf\x43\x32\x3b\xb4\x96\xab\x73\x8c\x4b\x24\x89\xaf\x23\xa1\xde\x10\xe6\xbc\x9d\x0a\xe5\x70\xfd\x00\xf6\xeb\xd6\x17\x08\xa5\xcc\xde\x41\x65\x4a\x06\xdd\x9e\x01\x3b\xa1\x4a\x74\x4d\x0e\x19\xb3\xa9\xeb\xc6\x38\x10\xba\xa9\x19\xc2\x98\x4a\xdb\xe5\x9b\x84\xdd\x22\x81\xab\x1c\x61\x3e\x0a\x50\x36\xc0\xfa\xb8\xb9\x77\x2c\xa6\x0c\xe7\xc9\xa6\xd7\x0d\x9b\x16\x44\xd0\x33\x3e\xcc\xe6\x4b\x58\x2b\xaa\xf9\x6c\xb9\x32\x72\x24\xa9\x1c\x36\xd8\x24\x63\xbf\xcd\xb7\xd6\xe3\xad\x1e\xa8\xa7\x09\xee\x9e\xad\x89\xbe\x60\x4c\xcb\x11\x8e\xee\xeb\x5d\x3f\x1a\x60\xa2\x82\x2e\xc0\xee\xb2\x52\x6b\x72\xd8\x09\xeb\x46\xc9\xc7\x3b\x91\x17\xca\x63\xff\x73\x80\x66\x12\x09\x5f\xeb\x4c\x84\x00\xc1\xb3\x17\x17\x8c\x43\xf2\xe7\x7a\xba\x2d\xf2\xe4\xe2\x39\x1b\xdc\xbd\xb8\xf8\x74\xf1\x3c\x18\x59\x1c\xc6\x8f\x04\x66\x2e\x93\x1c\xb7\xb0\x7b\x4f\x0e\xc1\xab\xfa\xdb\xcc\x61\x4a\xea\xf2\x8e\x4d\xde\xfa\x2f\x33\x16\x7b\x4f\xd6\xce\x77\x69\xf3\x75\x8c\xe8\x6c\xe9\xbf\x8f\xb3\x95\x36\xbe\xaf\x7e\xa9\x11\xe6\x85\x12\x84\x27\xf8\xe2\x0a\x5a\x43\x48\x8d\x05\xca\xa4\xeb\x73\x14\x5c\xe9\x0a\x4a\xed\x90\x20\x95\xa8\x12\x57\x53\xf5\xc0\xa8\xbe\xf9\x08\x81\xad\xa2\x6a\x70\xf1\xbe\x05\x9b\x03\x42\x38\x36\x78\x4b\xf8\x47\x27\xdc\xc0\x92\xdc\x11\x8e\xb0\x08\xb1\xd1\xb1\x20\xa9\x99\xee\x61\x2f\x29\x1b\x38\x5c\xb9\x8e\x1a\x1c\xc4\x26\x67\x46\x48\xa5\x75\x14\xc2\x7b\x61\x6b\x4e\x18\x74\x9c\xf7\x19\x19\xca\xd8\x3a\x92\xba\xef\xf4\x08\x65\xe5\xea\x10\x80\xc4\x57\x76\x59\x58\x8c\x91\x77\x30\xbc\xd5\xdf\x4e\xda\xa5\x55\x8f\x18\x2b\xa5\x55\x4c\x75\xed\x04\x04\xd1\xcf\x0d\xa7\xf2\x3b\xc6\x05\x77\xdd\xf7\x91\x8c\xd1\x78\x9d\x4e\x3a\x73\xda\x9b\x27\x78\x66\xa6\xc7\x1e\xf0\xa0\xcb\x3c\x42\xfb\x70\x4f\x7c\x7c\x2c\x37\x5d\x81\x92\x8e\x78\x0a\xec\x84\x95\x22\x52\xc8\xb3\x58\x10\xc4\x42\x73\xad\x96\x0e\x13\xae\xc2\x55\x69\xd5\x6a\x0d\xab\xbe\x6a\x59\xf9\xca\x59\x45\x52\xaf\xc2\x5b\x7d\xb3\x37\x3d\x1f\x5c\x41\x42\xed\x45\xe5\x40\x24\x2c\x54\x22\xc1\x9e\x9a\x41\x14\x97\xd6\xa2\x26\x40\xbd\x93\xd6\xe8\x1c\x35\x5d\xc2\xca\xb8\xc6\x23\x1f\xb2\x0a\xe1\x26\x33\xae\xae\x6f\x3f\xbc\x0a\xb4\x5c\xe3\xdb\x66\x48\x4d\x47\x99\xe0\x6e\x4b\x7d\xb9\x46\x15\x6c\xcd\xca\xc1\xeb\xeb\xeb\x77\xde\xf0\xf5\xf5\xd5\xef\x2f\x7f\x3d\x02\x0c\xe1\x0d\xb8\xcc\x94\x2a\x81\xc4\xc4\x25\x23\x80\x3d\xc7\x4d\xdd\xa1\xce\xe4\xe8\x65\x55\x78\xab\xff\x30\xa5\xcf\x88\xc5\x14\x2d\x97\x38\x88\xce\x17\x94\x8e\x51\x6d\x8d\x12\x7a\x7b\xec\x4b\x57\x69\x12\x77\x21\xfc\x62\x2c\x34\x24\xbe\xf6\x93\x3a\xf6\xa7\x66\x62\xc7\x4e\xb8\x9e\x99\x0f\xc8\xc0\xe7\x56\xca\x36\xd6\x5e\x7e\xe6\xd5\xb1\xbe\x37\xbb\xfb\xfb\x70\x87\xd6\x49\xa3\x0f\x87\xc1\xd6\xf9\xfd\x7d\x68\xdc\xe1\xc0\x9f\x9c\x93\xc3\x21\x24\x61\xc3\xed\xdf\x9f\x43\x80\x37\xa9\x3f\xb7\xce\x8d\xcf\xe5\x4e\x58\x58\x35\x9e\x2e\xe1\xc7\xf0\xa7\xf0\x59\x9d\x7a\x5b\x6a\x68\xc4\x32\xdf\x95\x80\x8b\xe7\x10\x49\x02\x4f\xd6\x4d\xe2\xd7\x20\xa9\xe6\xb2\xae\x0b\x1f\x01\xdd\x1f\x32\xc4\xec\x47\xc1\xb9\x9f\x3e\x1d\xda\x25\xe6\x98\x50\xf8\xd9\xa8\xb8\x67\x2d\x9b\xdd\x4e\x7d\xf5\x75\xf9\x42\x87\x0f\xd4\xd7\xa2\x78\x9f\x95\xfa\xb0\xac\x8a\x7a\xf6\x0f\x75\xe3\xfb\x7a\x24\xf4\xb5\x1c\x79\xed\xef\xbb\xa5\xe7\x64\x96\xc7\x72\x41\x71\x86\xf6\x91\x54\x76\x52\x66\xbe\xf2\xff\x46\xe8\x60\x9f\xc9\x38\x6b\x6e\xdf\xd5\x63\xad\xc3\x27\x8a\x42\x49\x8f\x79\x18\xd9\x42\xe6\xe0\x01\xa5\x32\x06\xf0\xb6\x61\xa6\x7e\x93\xfb\xe4\xf8\x40\x43\xf8\x90\xa1\x06\x85\x29\x01\xe6\x05\x55\x6b\x96\xc3\x23\xe3\xda\x72\xa2\x32\x96\x55\x15\xff\x4d\x57\x1a\x0d\x35\x15\x2b\x9d\x7a\x9a\xdf\xb2\xf9\xe2\xc6\x54\x67\x0d\x59\x1b\xc6\x6a\x06\x96\xa5\x38\x7c\xc7\x80\x59\x92\xe1\x33\xc6\xf3\x7a\x6f\xe9\xb6\xc6\x3c\x7d\xf2\xc6\xa6\x0f\xfc\x7b\xb7\xd6\x6a\xc9\xd9\x5b\x48\x96\x44\x6a\x27\x53\xff\xbf\x37\x74\xf2\xd7\xd5\x69\xc2\xb4\xf8\x57\x29\x2d\x26\x83\x6c\x76\x24\xb2\x9e\x25\xbb\xb3\x51\xd8\xf3\xac\x7b\xd6\x1c\x33\x47\x02\x47\x6f\x43\x6a\x38\xad\xb8\x4e\x53\xeb\x24\xc4\x09\xa3\x1d\x8f\x06\xb1\x13\x52\xf9\xf9\xcd\x82\xbe\x1d\x7a\x64\xda\x17\x14\xc7\xfa\x7b\x70\xb4\xb4\xf3\xfe\xbf\x8e\xe5\xa6\x3d\x77\x2a\xd7\xa2\x0a\xfa\x49\xee\x7e\x8a\xa4\x52\xe1\x23\xa3\x2a\xad\xfa\x14\x67\x18\x7f\x75\x65\xfe\x8d\x91\xcd\x57\xf9\x62\x1c\x2f\xdb\x53\x98\x3b\x7a\x2f\xb6\x18\xac\x3b\x85\xb6\x2b\x34\x92\xa4\xea\x97\x30\xcd\x3d\xc6\x46\xa7\x72\x5b\x32\xb1\x18\xed\x9d\xd5\x2f\xee\xc6\x6e\x0e\x67\xff\x04\x00\x00\xff\xff\x9f\xec\xd4\xf4\x4d\x14\x00\x00")

func BindownSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_BindownSchemaJson,
		"../../bindown.schema.json",
	)
}

func BindownSchemaJson() (*asset, error) {
	bytes, err := BindownSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../bindown.schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../bindown.schema.json": BindownSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"bindown.schema.json": &bintree{BindownSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
