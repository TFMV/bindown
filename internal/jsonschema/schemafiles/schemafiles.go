// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schemafiles generated by go-bindata.// sources:
// ../../bindown.schema.json
package schemafiles

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _BindownSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdf\x6f\xe3\xb8\x11\x7e\xcf\x5f\x31\xd0\x2d\xe0\x17\x47\xde\x76\x17\xe9\x21\x6f\xc1\x2d\x7a\x5d\xe0\x80\x14\xbd\xf4\x0e\x45\x73\xc8\x51\xd2\xc8\xe2\x85\x22\x55\x72\x64\x47\x0d\xfc\xbf\x17\x43\xfd\xb0\x7e\xda\xce\x75\x71\xd8\xbc\xd8\x16\x47\xc3\x8f\xc3\x6f\x66\x3e\x32\xaf\x57\x00\xc1\xbb\x04\x53\x17\xdc\x02\xff\x00\x08\x12\x2c\x50\x27\xa8\xe3\xaa\x7b\x06\x10\x14\xd6\x14\x68\x49\xa2\xeb\x3d\x05\x08\x84\x8d\x33\xb9\xc3\xa7\x42\x50\x36\x18\xf1\x9e\x5c\x6c\x65\x41\xd2\xe8\xe0\x16\x82\x87\x0c\x81\xcd\x40\x6a\xa0\x0c\x21\x31\x7b\xad\x8c\x48\x30\x81\xc6\x0b\xec\x33\xb4\xe8\x07\x23\xa9\x85\xad\x40\x3a\x50\x26\x16\x84\x49\x08\x9f\x30\x15\xa5\x22\x7e\x16\x6e\x1e\xcb\xf7\xef\x3f\xc4\x91\xd4\xfe\x0b\x06\xeb\xfe\xc4\x54\x15\xc8\x33\x3a\xb2\x52\x6f\x83\x6e\xe8\x70\xb4\x0a\x22\xa9\x2f\xc0\xab\x45\x8e\x60\xd2\x3e\x24\x32\x10\x21\x48\xed\x48\x28\x35\xc2\x45\xa3\x57\x8e\xb1\x0c\xdf\x8e\x50\x49\xfd\x7c\x06\xe2\xcf\x19\x52\x86\x96\x31\xc5\x16\x05\x21\x08\x70\x55\xce\x6f\xf2\xb3\x06\xb5\x07\x8b\x22\x61\x54\xb1\x29\x2a\xa9\xb7\x20\x69\x01\x51\x64\x8c\x42\xa1\xe7\x21\x99\x1d\x5a\x2b\x93\x11\x09\x98\x06\x49\x22\x19\x94\x50\x9f\x09\x73\x1e\x4e\x85\x72\xb8\x3e\x81\xfd\xbe\xf5\x05\x42\x29\xb3\x77\x50\x99\x92\x41\xb7\x73\xc0\x4e\xa8\x12\x5d\x13\x43\xc6\x6c\x6a\xde\x18\x07\x42\x37\x9c\x21\x8c\xa9\xb4\x5d\xbc\x49\xd8\x2d\x12\xb8\xca\x11\xe6\xa3\x05\xca\x06\x58\x1f\x37\xb3\xdf\x62\xca\x70\xbe\xd9\xf8\x3c\xd8\xb4\xd3\x07\x3d\xb3\xc3\x6c\xa4\x84\xb5\xa2\x9a\x8f\x93\xc5\xff\x94\xd2\x62\xf2\xb4\x13\xf6\x82\x58\x8d\x20\x2d\x91\x63\x0c\x64\x14\xd0\x3b\x50\xd2\x11\x87\x62\x27\xac\x14\x91\x42\x26\xa4\x20\xc8\x4b\x47\xcc\xd9\xc2\xa2\x43\x4d\x90\x1a\x0b\x42\xb7\x14\xe6\x98\xbb\x32\x8e\x11\x93\x79\x46\x9c\x58\xa7\x2b\x23\x47\x92\x4a\x86\x70\x62\x9d\x7f\x9f\x2f\x1e\x97\x5b\x9d\x0c\xca\x28\x2c\x3d\x5b\x13\xfd\x86\x31\x5d\x1c\xc0\x1f\xfb\xab\x81\xbd\x54\x0a\xba\x05\x76\x74\x4c\xad\xc9\x39\xc0\x6e\x44\x2f\x7c\x11\x79\xa1\x3c\xf6\x7f\x0f\xd0\x4c\x56\xc2\xc4\x9d\x59\x21\x40\xf0\xe1\xdb\x1b\xc6\x21\xf9\x73\x3d\x1d\x16\x79\x72\xf3\x91\x0d\x5e\xbe\xbd\x79\xba\xf9\x18\x8c\x2c\x0e\xe3\x57\x02\x33\x17\x49\x5e\xb7\xb0\x7b\x5f\xfe\x82\x4f\xf5\xb7\x99\xc9\x94\xd4\xe5\x0b\x9b\xfc\xe0\xbf\xcc\x58\xec\xa5\x4e\xcc\xde\xf9\x3a\xd4\x7c\x1d\x23\xba\x5a\xfa\xf5\xcb\x2c\xd3\xc6\xfb\x35\xa0\x9a\xcf\xe9\x3f\x2c\x99\x7e\x68\x52\xa9\x99\x16\x28\x93\xae\x57\xce\xb9\xd8\x3f\x6b\xb3\xd7\x75\xf6\x14\x85\xb1\xf4\xe6\xec\x21\xcc\x0b\x25\x08\xcf\x14\xf9\x3b\x68\x0d\x7d\xe6\x8e\x90\x84\x70\xa7\x2b\x28\xb5\x43\x82\x54\xa2\x4a\x5c\xdd\x5f\x87\x70\x3d\x99\x23\x04\xb6\x8a\xaa\x01\x97\x7d\xdd\x6c\x26\x08\xe1\x58\x95\xdb\x2e\x7d\x74\xc2\x55\x57\x92\x3b\xc2\x11\x16\x21\x36\x3a\x16\x24\x35\xf7\x68\xd8\x4b\xca\x06\x0e\x57\xae\xab\xe7\x0e\x62\x93\x73\x19\x4f\xa5\x75\x14\xc2\x4f\xc2\xd6\x85\x7c\x50\x44\xbc\xcf\xc8\x50\xc6\xd6\x91\xd4\x7d\xa7\x47\x28\x2b\x57\x2f\x01\x48\x3c\xb3\xcb\xc2\x62\x8c\x3c\x82\xe1\xa3\x7e\x7b\xa7\x2d\xad\xba\x40\x0b\x94\xd6\xd7\xca\x56\xb6\x80\xe8\xc7\x86\x43\xf9\x3b\x7a\xfc\xe9\xfe\x70\xaa\x6e\x1a\x8d\xf7\xe9\xa4\xd8\x4c\xcb\xcd\x99\xd2\x39\x53\x36\x4e\x78\xd0\x65\x1e\xa1\x3d\x9d\xe6\xbf\xfc\xdf\xfd\x2a\x16\x9a\xb9\x5a\x3a\x4c\x98\x85\xab\xd2\xaa\xd5\x1a\x56\x7d\xa9\xb9\xf2\xcc\x59\x45\x52\xaf\xc2\x47\xfd\xb0\x37\x3d\x1f\xcc\x20\xa1\xf6\xa2\x72\x20\x12\x56\x97\x91\x60\x4f\x8d\x7a\x88\x4b\x6b\xb9\x09\xa2\xde\x49\x6b\x74\x8e\x9a\x6e\x61\x65\x5c\xe3\x91\x27\x59\x85\xf0\x90\x19\x57\xf3\xdb\x2b\x8e\x02\x2d\x73\x7c\xdb\x94\x83\xa9\xfe\x10\x9c\x6d\xa9\xa7\x6b\x54\xc1\xd6\xac\x1c\x7c\x7f\x7f\xff\xa3\x37\xfc\xfe\xfe\xee\x1f\xdf\xfd\xed\x08\x30\x84\xcf\xe0\x32\x53\xaa\x04\x12\x13\x97\x8c\x00\xf6\xbc\x6e\xea\x26\x75\x26\x47\xaf\x85\xc3\x47\xfd\x2f\x53\xfa\x88\x58\x4c\xd1\x32\xc5\x41\x74\xbe\xa0\x74\x8c\x6a\x6b\x94\xd0\xdb\x63\x5e\xba\x4a\x93\x78\x09\xe1\xaf\xc6\x42\xd3\x97\xd6\x5e\x5e\xc5\x7e\xd6\x4c\xec\xd8\x09\xf3\x99\xeb\x01\x19\xf8\x35\x23\x2a\xdc\xed\x66\xd3\x58\x87\xc6\x6e\x37\x79\x75\xe4\xf7\x66\xf7\xfa\x1a\xee\xd0\x3a\x69\xf4\xe1\x30\x18\xba\x7e\x7d\x0d\x8d\x3b\x1c\xf8\x93\x63\x72\x38\x84\x24\x6c\xb8\xfd\xef\xaf\x21\xc0\xe7\xd4\xcf\x5b\xc7\xc6\xc7\x72\x27\x2c\xac\x1a\x4f\xb7\xf0\xa7\xf0\xcf\xe1\x87\x3a\xf4\xb6\xd4\x2c\x56\x39\xbd\x78\xaf\x04\xdc\x7c\x84\x48\x12\xf8\xfe\xd3\x04\x7e\x0d\x92\xea\x5a\xd6\x65\xe1\x05\xd0\xfd\x24\x43\xcc\xbe\xbb\x5d\xfb\x86\xda\xa1\x5d\xaa\x1c\x93\xae\x74\x35\x22\xf7\xac\x65\x33\xda\x49\xe6\xfe\x61\x6a\x21\xc3\x07\x92\x79\xf1\xc4\x35\x7b\x3e\x83\x39\x29\xdb\xb3\x3c\x95\x87\x3f\xd5\xcd\xa0\x2f\xbd\xc9\x1f\xd5\x7c\x9e\xf4\x9c\xcc\x56\xb0\x5c\x50\x9c\xa1\xbd\xb0\x88\x9d\x3d\x15\x7c\xf2\x3f\x23\x74\xb0\xcf\x64\x9c\x0d\xfb\x6f\x87\x4f\x14\x85\x92\x1e\xf3\x70\x65\x0b\x31\x83\x13\xb2\x6b\xa9\xf1\xf7\xd3\xdb\x07\xc7\x2f\x34\x84\x9f\x33\xd4\xa0\x30\x25\xc0\xbc\xa0\x6a\xcd\xa7\x97\x91\x71\x6d\x39\x91\x4c\xcb\x12\x91\xff\xa6\x4f\x1a\x41\x38\x55\x5e\x9d\x14\x9c\x1f\xb2\xf9\xe2\xc0\x54\x34\x0e\xeb\x35\x8c\xa5\x19\x2c\x9f\x9c\xe0\x77\xb4\x96\x25\x55\x34\x63\x3c\x2f\x5e\x97\x76\x6b\x5c\xa1\xcf\xee\xd8\xf4\x85\x2f\xb7\x6b\xad\x30\x9e\xdd\x85\x64\x49\x71\x77\x9a\xfb\xeb\xdd\xa1\xb3\x47\xe2\xf3\xa5\xb2\x3d\x19\x0f\xa2\xd9\x15\x91\xf5\x6c\x99\xbb\x1a\x2d\x7b\xbe\xde\x5e\x35\xd3\x04\xef\x24\x7b\x0f\xda\xbe\xc0\xed\x42\x44\x2c\x40\xc3\xad\xa4\xac\x8c\x42\x69\x36\x4d\xa3\x69\x3f\x43\x17\x67\x98\x8b\xf0\x37\x67\xea\xad\x09\xde\xd5\x4f\x5a\x47\xb7\x9b\x0d\x8f\x5d\x37\x76\xdc\x63\x12\x2b\x52\xba\x7e\xff\x97\x4d\xfd\xec\x9b\xfa\xbd\x99\x0a\x14\xc4\x22\xce\x06\xf5\x3f\xa9\x6f\x8c\xd8\x79\xb8\x09\x1b\x0c\xdd\xe2\xe7\xb4\x67\x22\x2d\xc6\x64\x6c\xd5\x5c\x91\xb5\x8d\xd2\xf7\x42\xef\xbf\xeb\x88\xb5\xa8\xc6\x17\xb2\x22\x66\x4d\x9e\x4a\xaf\x39\x1e\xb8\x80\x4a\x07\x16\x95\x20\xb9\xc3\xf6\x7e\x68\xec\xd9\x6b\x24\xa3\x53\xb9\x2d\x39\x41\x8c\xf6\x0e\xc0\xa2\xf3\x21\x6c\x26\x63\x0d\xe6\x5a\x15\xd3\x88\xad\xd2\x21\x6c\x58\x09\xb1\x30\x56\x32\x97\x84\x16\x70\x87\xbe\x9d\x37\x27\x44\x30\x16\x8c\xbf\xb2\x9a\x26\xe0\x71\x7e\x5d\x23\x3c\x7a\x91\x4e\xaf\x08\x36\xfd\x16\x3d\x4b\xec\xb6\xe9\x76\xe4\x19\x76\x82\xf3\xd2\xfa\x54\x0f\x9d\x70\x79\xd2\xba\x8e\x93\x82\xd8\x09\xa9\xbc\x44\xe3\x33\x5b\xbb\x5d\x64\xda\x5b\x97\x70\xba\x90\x39\xf5\xd0\x58\x3f\x75\xbb\xb4\x48\xa3\x48\x5e\xca\x20\xaf\xb1\x5b\x44\xcd\x04\xae\xa6\x09\x90\xf9\x72\x4c\x99\x60\xff\xda\x59\x33\xbd\x62\x38\x79\xbd\xb0\x50\x5a\x17\xf9\xa1\x46\x57\x0a\x7d\x92\xb6\x41\x19\x5f\x25\xcc\x95\xe3\x16\x6e\x2b\xf7\x9f\x9c\x29\x6d\xfc\x56\xa2\xbf\x11\xfc\x3f\x0b\x47\x16\x45\x0e\xcd\x64\xf5\x55\x44\x83\xc0\x5d\xc8\xe6\xce\xfe\x0f\xcb\xc9\x87\x76\xc6\xe9\xc9\x32\xaa\x86\x3b\xd0\xde\x9a\x30\x89\x2f\x5c\x4f\x69\xd5\x53\x9c\x61\xfc\xec\xca\x25\xda\x7c\xa1\xf0\x7f\xd7\xce\xc2\x04\xea\xfd\xe3\xa4\x2e\xee\x67\xd0\x76\x9d\x91\x24\xa9\xfa\x92\xbf\xc9\xfe\x69\xfa\xd6\x5d\x6c\xec\xe6\x70\xf5\xbf\x00\x00\x00\xff\xff\xb7\x25\x28\x6d\x2a\x1a\x00\x00")

func BindownSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_BindownSchemaJson,
		"../../bindown.schema.json",
	)
}

func BindownSchemaJson() (*asset, error) {
	bytes, err := BindownSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../bindown.schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../bindown.schema.json": BindownSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"bindown.schema.json": &bintree{BindownSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
